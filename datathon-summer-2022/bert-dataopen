{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"rkOVK9f2a6MV"},"outputs":[],"source":["\n","!pip install transformers"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":2646,"status":"ok","timestamp":1658599812665,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"WVKfyG-Ia9FD"},"outputs":[],"source":["import pandas as pd\n","import torch\n","import numpy as np\n","\n","# from transformers import BertTokenizer, BertModel, BertForSequenceClassification\n","\n","# from torch import nn\n","# from torch.optim import Adam\n","# from tqdm import tqdm"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":72661,"status":"ok","timestamp":1658599885322,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"qFAawjZkbBud","outputId":"5be6e4e3-e7d0-4723-cf2d-f26d3adbede2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /drive\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2882: DtypeWarning: Columns (19,59,118,129,130,131,134,135,136,139,145,146,147) have mixed types.Specify dtype option on import or set low_memory=False.\n","  exec(code_obj, self.user_global_ns, self.user_ns)\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/drive\")\n","df = pd.read_csv(\"/drive/MyDrive/dataopen/LC/Lending_Club_Accepted_2014_2018.csv\", delimiter = ',') \n","# dfc = pd.read_csv(\"/drive/My Drive/dataopen/archive/accepted_2007_to_2018Q4.csv.gz\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MzN9BMHJjs5P"},"outputs":[],"source":["# c_desc = dfc[dfc.desc.notna()]\n","# c_desc = c_desc[c_desc.loan_status.apply(lambda x: x in ['Fully Paid', 'Charged Off', 'Default'])]\n","# dfc_def = c_desc[c_desc.loan_status.apply(lambda x: x in ['Charged Off', 'Default'])]"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":4978,"status":"ok","timestamp":1658599036600,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"L9OFIBKpHBZe"},"outputs":[],"source":["df = df[df.desc.apply(lambda x: x != '')]"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":317,"status":"ok","timestamp":1658599041826,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"7qvsbsezHwxQ"},"outputs":[],"source":["df = df[df.desc.notna()]"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":357,"status":"ok","timestamp":1658599900775,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"bKHpdbOodJ6h"},"outputs":[],"source":["df = df[df.desc.notna()]\n","df = df[df.desc.apply(lambda x: x != '')]\n","dfl = df[df.grade.apply(lambda x: x in ['D', 'E', 'F', 'G'])]\n","dfh = df[df.grade.apply(lambda x: x in ['A', 'B', 'C'])]\n","# df = df[df.loan_status.apply(lambda x: x in ['Fully Paid', 'Charged Off', 'Default'])]\n","# df['label'] = df.loan_status.apply(lambda x: 1 if x == 'Fully Paid' else 0)"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4145,"status":"ok","timestamp":1658596777592,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"CC6Dv9FIC0vi","outputId":"f229158f-6844-4230-d9bf-bd8120630782"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: sentence-transformers in /usr/local/lib/python3.7/dist-packages (2.2.2)\n","Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (0.13.0+cu113)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (4.64.0)\n","Requirement already satisfied: transformers\u003c5.0.0,\u003e=4.6.0 in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (4.20.1)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (1.7.3)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (1.21.6)\n","Requirement already satisfied: sentencepiece in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (0.1.96)\n","Requirement already satisfied: huggingface-hub\u003e=0.4.0 in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (0.8.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (1.0.2)\n","Requirement already satisfied: nltk in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (3.7)\n","Requirement already satisfied: torch\u003e=1.6.0 in /usr/local/lib/python3.7/dist-packages (from sentence-transformers) (1.12.0+cu113)\n","Requirement already satisfied: typing-extensions\u003e=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub\u003e=0.4.0-\u003esentence-transformers) (4.1.1)\n","Requirement already satisfied: pyyaml\u003e=5.1 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub\u003e=0.4.0-\u003esentence-transformers) (5.4.1)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from huggingface-hub\u003e=0.4.0-\u003esentence-transformers) (4.12.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from huggingface-hub\u003e=0.4.0-\u003esentence-transformers) (2.23.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from huggingface-hub\u003e=0.4.0-\u003esentence-transformers) (3.7.1)\n","Requirement already satisfied: packaging\u003e=20.9 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub\u003e=0.4.0-\u003esentence-transformers) (21.3)\n","Requirement already satisfied: pyparsing!=3.0.5,\u003e=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging\u003e=20.9-\u003ehuggingface-hub\u003e=0.4.0-\u003esentence-transformers) (3.0.9)\n","Requirement already satisfied: tokenizers!=0.11.3,\u003c0.13,\u003e=0.11.1 in /usr/local/lib/python3.7/dist-packages (from transformers\u003c5.0.0,\u003e=4.6.0-\u003esentence-transformers) (0.12.1)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers\u003c5.0.0,\u003e=4.6.0-\u003esentence-transformers) (2022.6.2)\n","Requirement already satisfied: zipp\u003e=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata-\u003ehuggingface-hub\u003e=0.4.0-\u003esentence-transformers) (3.8.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from nltk-\u003esentence-transformers) (1.1.0)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from nltk-\u003esentence-transformers) (7.1.2)\n","Requirement already satisfied: certifi\u003e=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests-\u003ehuggingface-hub\u003e=0.4.0-\u003esentence-transformers) (2022.6.15)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,\u003c1.26,\u003e=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests-\u003ehuggingface-hub\u003e=0.4.0-\u003esentence-transformers) (1.24.3)\n","Requirement already satisfied: idna\u003c3,\u003e=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-\u003ehuggingface-hub\u003e=0.4.0-\u003esentence-transformers) (2.10)\n","Requirement already satisfied: chardet\u003c4,\u003e=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-\u003ehuggingface-hub\u003e=0.4.0-\u003esentence-transformers) (3.0.4)\n","Requirement already satisfied: threadpoolctl\u003e=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-\u003esentence-transformers) (3.1.0)\n","Requirement already satisfied: pillow!=8.3.*,\u003e=5.3.0 in /usr/local/lib/python3.7/dist-packages (from torchvision-\u003esentence-transformers) (7.1.2)\n"]}],"source":["!pip install -U sentence-transformers\n","from sentence_transformers import SentenceTransformer\n","model = SentenceTransformer('all-MiniLM-L6-v2')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qETofB-ZCLgF"},"outputs":[],"source":["# BERT_MODEL = \"bert-base-uncased\"\n","# tokenizer = BertTokenizer.from_pretrained(BERT_MODEL)\n"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":743,"status":"ok","timestamp":1658599929403,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"DHnI-vQcCxJc","outputId":"4a327552-c9ce-483a-c163-c98305c7d065"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py:5516: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self[name] = value\n"]}],"source":["def cleanup(text):\n","  start = text.find('\u003e')\n","  end = text.find('\u003c')\n","  return text[start + 1: end]\n","dfl.desc= dfl.desc.apply(cleanup)"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1658599931243,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"0wce51mjsRUA","outputId":"b55b9657-9303-4eb8-f448-1b9254b7fe51"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py:5516: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self[name] = value\n"]}],"source":["dfh.desc= dfh.desc.apply(cleanup)"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"elapsed":118,"status":"ok","timestamp":1658599054592,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"ivfXaFfW-qOc","outputId":"ef548f81-d37c-4c47-a51c-e6c4520f4f62"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-0166227e-a3cc-4fdd-8706-64c465e063a5\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eid\u003c/th\u003e\n","      \u003cth\u003emember_id\u003c/th\u003e\n","      \u003cth\u003eloan_amnt\u003c/th\u003e\n","      \u003cth\u003efunded_amnt\u003c/th\u003e\n","      \u003cth\u003efunded_amnt_inv\u003c/th\u003e\n","      \u003cth\u003eterm\u003c/th\u003e\n","      \u003cth\u003eint_rate\u003c/th\u003e\n","      \u003cth\u003einstallment\u003c/th\u003e\n","      \u003cth\u003egrade\u003c/th\u003e\n","      \u003cth\u003esub_grade\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003ehardship_payoff_balance_amount\u003c/th\u003e\n","      \u003cth\u003ehardship_last_payment_amount\u003c/th\u003e\n","      \u003cth\u003edisbursement_method\u003c/th\u003e\n","      \u003cth\u003edebt_settlement_flag\u003c/th\u003e\n","      \u003cth\u003edebt_settlement_flag_date\u003c/th\u003e\n","      \u003cth\u003esettlement_status\u003c/th\u003e\n","      \u003cth\u003esettlement_date\u003c/th\u003e\n","      \u003cth\u003esettlement_amount\u003c/th\u003e\n","      \u003cth\u003esettlement_percentage\u003c/th\u003e\n","      \u003cth\u003esettlement_term\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e0 rows × 151 columns\u003c/p\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0166227e-a3cc-4fdd-8706-64c465e063a5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-0166227e-a3cc-4fdd-8706-64c465e063a5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0166227e-a3cc-4fdd-8706-64c465e063a5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["Empty DataFrame\n","Columns: [id, member_id, loan_amnt, funded_amnt, funded_amnt_inv, term, int_rate, installment, grade, sub_grade, emp_title, emp_length, home_ownership, annual_inc, verification_status, issue_d, loan_status, pymnt_plan, url, desc, purpose, title, zip_code, addr_state, dti, delinq_2yrs, earliest_cr_line, fico_range_low, fico_range_high, inq_last_6mths, mths_since_last_delinq, mths_since_last_record, open_acc, pub_rec, revol_bal, revol_util, total_acc, initial_list_status, out_prncp, out_prncp_inv, total_pymnt, total_pymnt_inv, total_rec_prncp, total_rec_int, total_rec_late_fee, recoveries, collection_recovery_fee, last_pymnt_d, last_pymnt_amnt, next_pymnt_d, last_credit_pull_d, last_fico_range_high, last_fico_range_low, collections_12_mths_ex_med, mths_since_last_major_derog, policy_code, application_type, annual_inc_joint, dti_joint, verification_status_joint, acc_now_delinq, tot_coll_amt, tot_cur_bal, open_acc_6m, open_act_il, open_il_12m, open_il_24m, mths_since_rcnt_il, total_bal_il, il_util, open_rv_12m, open_rv_24m, max_bal_bc, all_util, total_rev_hi_lim, inq_fi, total_cu_tl, inq_last_12m, acc_open_past_24mths, avg_cur_bal, bc_open_to_buy, bc_util, chargeoff_within_12_mths, delinq_amnt, mo_sin_old_il_acct, mo_sin_old_rev_tl_op, mo_sin_rcnt_rev_tl_op, mo_sin_rcnt_tl, mort_acc, mths_since_recent_bc, mths_since_recent_bc_dlq, mths_since_recent_inq, mths_since_recent_revol_delinq, num_accts_ever_120_pd, num_actv_bc_tl, num_actv_rev_tl, num_bc_sats, num_bc_tl, num_il_tl, num_op_rev_tl, ...]\n","Index: []\n","\n","[0 rows x 151 columns]"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["dfl[dfl.desc=='']"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":130,"status":"ok","timestamp":1658599061347,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"zcjz1NfIGo2b","outputId":"89323538-f90e-4fe1-a233-d00529f8ea10"},"outputs":[{"data":{"text/plain":["11873"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["len(dfh)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"zh5FCEP3PkKI"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting top2vec\n","  Downloading top2vec-1.0.27-py3-none-any.whl (25 kB)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from top2vec) (1.3.5)\n","Collecting gensim\u003e=4.0.0\n","  Downloading gensim-4.2.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (24.1 MB)\n","\u001b[K     |████████████████████████████████| 24.1 MB 1.4 MB/s \n","\u001b[?25hRequirement already satisfied: numpy\u003e=1.20.0 in /usr/local/lib/python3.7/dist-packages (from top2vec) (1.21.6)\n","Collecting hdbscan\u003e=0.8.27\n","  Downloading hdbscan-0.8.28.tar.gz (5.2 MB)\n","\u001b[K     |████████████████████████████████| 5.2 MB 60.5 MB/s \n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Collecting umap-learn\u003e=0.5.1\n","  Downloading umap-learn-0.5.3.tar.gz (88 kB)\n","\u001b[K     |████████████████████████████████| 88 kB 8.7 MB/s \n","\u001b[?25hRequirement already satisfied: wordcloud in /usr/local/lib/python3.7/dist-packages (from top2vec) (1.5.0)\n","Requirement already satisfied: smart-open\u003e=1.8.1 in /usr/local/lib/python3.7/dist-packages (from gensim\u003e=4.0.0-\u003etop2vec) (5.2.1)\n","Requirement already satisfied: scipy\u003e=0.18.1 in /usr/local/lib/python3.7/dist-packages (from gensim\u003e=4.0.0-\u003etop2vec) (1.7.3)\n","Requirement already satisfied: joblib\u003e=1.0 in /usr/local/lib/python3.7/dist-packages (from hdbscan\u003e=0.8.27-\u003etop2vec) (1.1.0)\n","Requirement already satisfied: cython\u003e=0.27 in /usr/local/lib/python3.7/dist-packages (from hdbscan\u003e=0.8.27-\u003etop2vec) (0.29.30)\n","Requirement already satisfied: scikit-learn\u003e=0.20 in /usr/local/lib/python3.7/dist-packages (from hdbscan\u003e=0.8.27-\u003etop2vec) (1.0.2)\n","Requirement already satisfied: threadpoolctl\u003e=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn\u003e=0.20-\u003ehdbscan\u003e=0.8.27-\u003etop2vec) (3.1.0)\n","Requirement already satisfied: numba\u003e=0.49 in /usr/local/lib/python3.7/dist-packages (from umap-learn\u003e=0.5.1-\u003etop2vec) (0.51.2)\n","Collecting pynndescent\u003e=0.5\n","  Downloading pynndescent-0.5.7.tar.gz (1.1 MB)\n","\u001b[K     |████████████████████████████████| 1.1 MB 53.0 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from umap-learn\u003e=0.5.1-\u003etop2vec) (4.64.0)\n","Requirement already satisfied: llvmlite\u003c0.35,\u003e=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.49-\u003eumap-learn\u003e=0.5.1-\u003etop2vec) (0.34.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.49-\u003eumap-learn\u003e=0.5.1-\u003etop2vec) (57.4.0)\n","Requirement already satisfied: pytz\u003e=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas-\u003etop2vec) (2022.1)\n","Requirement already satisfied: python-dateutil\u003e=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas-\u003etop2vec) (2.8.2)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil\u003e=2.7.3-\u003epandas-\u003etop2vec) (1.15.0)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from wordcloud-\u003etop2vec) (7.1.2)\n","Building wheels for collected packages: hdbscan, umap-learn, pynndescent\n","  Building wheel for hdbscan (PEP 517) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for hdbscan: filename=hdbscan-0.8.28-cp37-cp37m-linux_x86_64.whl size=2342153 sha256=d14fff9b117b1e2a959e419b0b6784d0d2aba7ead313eedb3bef1f70f98a69c9\n","  Stored in directory: /root/.cache/pip/wheels/6e/7a/5e/259ccc841c085fc41b99ef4a71e896b62f5161f2bc8a14c97a\n","  Building wheel for umap-learn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for umap-learn: filename=umap_learn-0.5.3-py3-none-any.whl size=82829 sha256=c81c1b39bafd55f960e73d9ed2623ff7eed5ed257fb0458de2a58955a7decfb7\n","  Stored in directory: /root/.cache/pip/wheels/b3/52/a5/1fd9e3e76a7ab34f134c07469cd6f16e27ef3a37aeff1fe821\n","  Building wheel for pynndescent (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pynndescent: filename=pynndescent-0.5.7-py3-none-any.whl size=54286 sha256=849fc5ea8ea4eb90c0db80764a909ed7ceb8a14d480f3e3f0e5c7004d0dce6b6\n","  Stored in directory: /root/.cache/pip/wheels/7f/2a/f8/7bd5dcec71bd5c669f6f574db3113513696b98f3f9b51f496c\n","Successfully built hdbscan umap-learn pynndescent\n","Installing collected packages: pynndescent, umap-learn, hdbscan, gensim, top2vec\n","  Attempting uninstall: gensim\n","    Found existing installation: gensim 3.6.0\n","    Uninstalling gensim-3.6.0:\n","      Successfully uninstalled gensim-3.6.0\n","Successfully installed gensim-4.2.0 hdbscan-0.8.28 pynndescent-0.5.7 top2vec-1.0.27 umap-learn-0.5.3\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: top2vec[sentence_encoders] in /usr/local/lib/python3.7/dist-packages (1.0.27)\n","Requirement already satisfied: umap-learn\u003e=0.5.1 in /usr/local/lib/python3.7/dist-packages (from top2vec[sentence_encoders]) (0.5.3)\n","Requirement already satisfied: hdbscan\u003e=0.8.27 in /usr/local/lib/python3.7/dist-packages (from top2vec[sentence_encoders]) (0.8.28)\n","Requirement already satisfied: gensim\u003e=4.0.0 in /usr/local/lib/python3.7/dist-packages (from top2vec[sentence_encoders]) (4.2.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from top2vec[sentence_encoders]) (1.3.5)\n","Requirement already satisfied: numpy\u003e=1.20.0 in /usr/local/lib/python3.7/dist-packages (from top2vec[sentence_encoders]) (1.21.6)\n","Requirement already satisfied: wordcloud in /usr/local/lib/python3.7/dist-packages (from top2vec[sentence_encoders]) (1.5.0)\n","Collecting tensorflow-text\n","  Downloading tensorflow_text-2.9.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.6 MB)\n","\u001b[K     |████████████████████████████████| 4.6 MB 29.6 MB/s \n","\u001b[?25hRequirement already satisfied: tensorflow-hub in /usr/local/lib/python3.7/dist-packages (from top2vec[sentence_encoders]) (0.12.0)\n","Requirement already satisfied: tensorflow in /usr/local/lib/python3.7/dist-packages (from top2vec[sentence_encoders]) (2.8.2+zzzcolab20220719082949)\n","Requirement already satisfied: scipy\u003e=0.18.1 in /usr/local/lib/python3.7/dist-packages (from gensim\u003e=4.0.0-\u003etop2vec[sentence_encoders]) (1.7.3)\n","Requirement already satisfied: smart-open\u003e=1.8.1 in /usr/local/lib/python3.7/dist-packages (from gensim\u003e=4.0.0-\u003etop2vec[sentence_encoders]) (5.2.1)\n","Requirement already satisfied: joblib\u003e=1.0 in /usr/local/lib/python3.7/dist-packages (from hdbscan\u003e=0.8.27-\u003etop2vec[sentence_encoders]) (1.1.0)\n","Requirement already satisfied: cython\u003e=0.27 in /usr/local/lib/python3.7/dist-packages (from hdbscan\u003e=0.8.27-\u003etop2vec[sentence_encoders]) (0.29.30)\n","Requirement already satisfied: scikit-learn\u003e=0.20 in /usr/local/lib/python3.7/dist-packages (from hdbscan\u003e=0.8.27-\u003etop2vec[sentence_encoders]) (1.0.2)\n","Requirement already satisfied: threadpoolctl\u003e=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn\u003e=0.20-\u003ehdbscan\u003e=0.8.27-\u003etop2vec[sentence_encoders]) (3.1.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.7/dist-packages (from umap-learn\u003e=0.5.1-\u003etop2vec[sentence_encoders]) (4.64.0)\n","Requirement already satisfied: pynndescent\u003e=0.5 in /usr/local/lib/python3.7/dist-packages (from umap-learn\u003e=0.5.1-\u003etop2vec[sentence_encoders]) (0.5.7)\n","Requirement already satisfied: numba\u003e=0.49 in /usr/local/lib/python3.7/dist-packages (from umap-learn\u003e=0.5.1-\u003etop2vec[sentence_encoders]) (0.51.2)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.49-\u003eumap-learn\u003e=0.5.1-\u003etop2vec[sentence_encoders]) (57.4.0)\n","Requirement already satisfied: llvmlite\u003c0.35,\u003e=0.34.0.dev0 in /usr/local/lib/python3.7/dist-packages (from numba\u003e=0.49-\u003eumap-learn\u003e=0.5.1-\u003etop2vec[sentence_encoders]) (0.34.0)\n","Requirement already satisfied: pytz\u003e=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas-\u003etop2vec[sentence_encoders]) (2022.1)\n","Requirement already satisfied: python-dateutil\u003e=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas-\u003etop2vec[sentence_encoders]) (2.8.2)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil\u003e=2.7.3-\u003epandas-\u003etop2vec[sentence_encoders]) (1.15.0)\n","Requirement already satisfied: typing-extensions\u003e=3.6.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (4.1.1)\n","Requirement already satisfied: absl-py\u003e=0.4.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (1.2.0)\n","Requirement already satisfied: flatbuffers\u003e=1.12 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (2.0)\n","Requirement already satisfied: astunparse\u003e=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (1.6.3)\n","Requirement already satisfied: gast\u003e=0.2.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (0.5.3)\n","Requirement already satisfied: google-pasta\u003e=0.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (0.2.0)\n","Requirement already satisfied: h5py\u003e=2.9.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (3.1.0)\n","Requirement already satisfied: termcolor\u003e=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (1.1.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem\u003e=0.23.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (0.26.0)\n","Requirement already satisfied: opt-einsum\u003e=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (3.3.0)\n","Requirement already satisfied: wrapt\u003e=1.11.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (1.14.1)\n","Requirement already satisfied: keras-preprocessing\u003e=1.1.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (1.1.2)\n","Requirement already satisfied: tensorflow-estimator\u003c2.9,\u003e=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (2.8.0)\n","Requirement already satisfied: keras\u003c2.9,\u003e=2.8.0rc0 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (2.8.0)\n","Requirement already satisfied: grpcio\u003c2.0,\u003e=1.24.3 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (1.47.0)\n","Requirement already satisfied: libclang\u003e=9.0.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (14.0.1)\n","Requirement already satisfied: tensorboard\u003c2.9,\u003e=2.8 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (2.8.0)\n","Requirement already satisfied: protobuf\u003c3.20,\u003e=3.9.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow-\u003etop2vec[sentence_encoders]) (3.17.3)\n","Requirement already satisfied: wheel\u003c1.0,\u003e=0.23.0 in /usr/local/lib/python3.7/dist-packages (from astunparse\u003e=1.6.0-\u003etensorflow-\u003etop2vec[sentence_encoders]) (0.37.1)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py\u003e=2.9.0-\u003etensorflow-\u003etop2vec[sentence_encoders]) (1.5.2)\n","Requirement already satisfied: tensorboard-data-server\u003c0.7.0,\u003e=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (0.6.1)\n","Requirement already satisfied: werkzeug\u003e=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (1.0.1)\n","Requirement already satisfied: google-auth-oauthlib\u003c0.5,\u003e=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (0.4.6)\n","Requirement already satisfied: markdown\u003e=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (3.4.1)\n","Requirement already satisfied: requests\u003c3,\u003e=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (2.23.0)\n","Requirement already satisfied: google-auth\u003c3,\u003e=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (1.35.0)\n","Requirement already satisfied: tensorboard-plugin-wit\u003e=1.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (1.8.1)\n","Requirement already satisfied: cachetools\u003c5.0,\u003e=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth\u003c3,\u003e=1.6.3-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (4.2.4)\n","Requirement already satisfied: rsa\u003c5,\u003e=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth\u003c3,\u003e=1.6.3-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (4.8)\n","Requirement already satisfied: pyasn1-modules\u003e=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth\u003c3,\u003e=1.6.3-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (0.2.8)\n","Requirement already satisfied: requests-oauthlib\u003e=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib\u003c0.5,\u003e=0.4.1-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (1.3.1)\n","Requirement already satisfied: importlib-metadata\u003e=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown\u003e=2.6.8-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (4.12.0)\n","Requirement already satisfied: zipp\u003e=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata\u003e=4.4-\u003emarkdown\u003e=2.6.8-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (3.8.1)\n","Requirement already satisfied: pyasn1\u003c0.5.0,\u003e=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules\u003e=0.2.1-\u003egoogle-auth\u003c3,\u003e=1.6.3-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (0.4.8)\n","Requirement already satisfied: certifi\u003e=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests\u003c3,\u003e=2.21.0-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (2022.6.15)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,\u003c1.26,\u003e=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests\u003c3,\u003e=2.21.0-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (1.24.3)\n","Requirement already satisfied: chardet\u003c4,\u003e=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests\u003c3,\u003e=2.21.0-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (3.0.4)\n","Requirement already satisfied: idna\u003c3,\u003e=2.5 in /usr/local/lib/python3.7/dist-packages (from requests\u003c3,\u003e=2.21.0-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (2.10)\n","Requirement already satisfied: oauthlib\u003e=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib\u003e=0.7.0-\u003egoogle-auth-oauthlib\u003c0.5,\u003e=0.4.1-\u003etensorboard\u003c2.9,\u003e=2.8-\u003etensorflow-\u003etop2vec[sentence_encoders]) (3.2.0)\n","Collecting tensorflow\n","  Downloading tensorflow-2.9.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (511.7 MB)\n","\u001b[K     |████████████████████████████████| 511.7 MB 6.0 kB/s \n","\u001b[?25h  Downloading tensorflow-2.9.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (511.7 MB)\n","\u001b[K     |████████████████████████████████| 511.7 MB 4.5 kB/s \n","\u001b[?25hINFO: pip is looking at multiple versions of tensorflow-text to determine which version is compatible with other requirements. This could take a while.\n","Collecting tensorflow-text\n","  Downloading tensorflow_text-2.8.2-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (4.9 MB)\n","\u001b[K     |████████████████████████████████| 4.9 MB 51.3 MB/s \n","\u001b[?25hRequirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from wordcloud-\u003etop2vec[sentence_encoders]) (7.1.2)\n","Installing collected packages: tensorflow-text\n","Successfully installed tensorflow-text-2.8.2\n"]}],"source":["!pip install top2vec\n","!pip install top2vec[sentence_encoders]\n","from top2vec import Top2Vec"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":568},"executionInfo":{"elapsed":170,"status":"error","timestamp":1658599753341,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"VBbJUw-1Ogyf","outputId":"48820728-7750-495b-9ada-8851c429c7fe"},"outputs":[{"ename":"ImportError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-20-5847f232891d\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[0;32m----\u003e 1\u001b[0;31m \u001b[0mtopic_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTop2Vec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdfh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdesc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0membedding_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'universal-sentence-encoder'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtopic_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_topic_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/top2vec/Top2Vec.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, documents, min_count, ngram_vocab, ngram_vocab_args, embedding_model, embedding_model_path, embedding_batch_size, split_documents, document_chunker, chunk_length, max_num_chunks, chunk_overlap_ratio, chunk_len_coverage_ratio, sentencizer, speed, use_corpus_file, document_ids, keep_documents, workers, tokenizer, use_embedding_model_tokenizer, umap_args, hdbscan_args, verbose)\u001b[0m\n\u001b[1;32m    566\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedding_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0membedding_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    567\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 568\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_import_status\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    569\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    570\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Pre-processing documents for training'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/top2vec/Top2Vec.py\u001b[0m in \u001b[0;36m_check_import_status\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1087\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0membedding_model\u001b[0m \u001b[0;32min\u001b[0m \u001b[0muse_models\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0m_HAVE_TENSORFLOW\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1089\u001b[0;31m                 raise ImportError(f\"{self.embedding_model} is not available.\\n\\n\"\n\u001b[0m\u001b[1;32m   1090\u001b[0m                                   \u001b[0;34m\"Try: pip install top2vec[sentence_encoders]\\n\\n\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m                                   \"Alternatively try: pip install tensorflow tensorflow_hub tensorflow_text\")\n","\u001b[0;31mImportError\u001b[0m: universal-sentence-encoder is not available.\n\nTry: pip install top2vec[sentence_encoders]\n\nAlternatively try: pip install tensorflow tensorflow_hub tensorflow_text","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}],"source":["topic_model = Top2Vec(dfh.desc.to_list(),embedding_model='universal-sentence-encoder')\n","topic_model.get_topic_info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1784,"status":"ok","timestamp":1658561474437,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"--bGUvB1situ","outputId":"58590303-2e6c-4191-b330-68df7770de49"},"outputs":[{"name":"stdout","output_type":"stream","text":["start label 0\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/decomposition/_nmf.py:1425: FutureWarning: `alpha` was deprecated in version 1.0 and will be removed in 1.2. Use `alpha_W` and `alpha_H` instead\n","  FutureWarning,\n"]},{"name":"stdout","output_type":"stream","text":["Topic 0\n","consolidate bills debt payment monthly like loan pay credit want need month loans payments debts make consolidation lower card cards rate just trying high looking consolidating thank help years time\n","Topic 0\n","consolidate debt payment bills like loan credit monthly pay want loans payments debts consolidation need cards lower month make consolidating trying just rate card high looking house time easier thank\n","idf values: \n"," [('1200', 5.941642422609304), ('15', 5.941642422609304), ('accrued', 5.941642422609304), ('actually', 5.941642422609304), ('added', 5.941642422609304), ('appreciated', 5.941642422609304), ('approximately', 5.941642422609304), ('assist', 5.941642422609304), ('available', 5.941642422609304), ('bankruptcy', 5.941642422609304), ('big', 5.941642422609304), ('borrower', 5.941642422609304), ('bought', 5.941642422609304), ('bunch', 5.941642422609304), ('charge', 5.941642422609304), ('closed', 5.941642422609304), ('comfortable', 5.941642422609304), ('complete', 5.941642422609304), ('continue', 5.941642422609304), ('control', 5.941642422609304), ('convenience', 5.941642422609304), ('convenient', 5.941642422609304), ('credits', 5.941642422609304), ('cut', 5.941642422609304), ('dates', 5.941642422609304), ('day', 5.941642422609304), ('debits', 5.941642422609304), ('dept', 5.941642422609304), ('difficult', 5.941642422609304), ('does', 5.941642422609304)]\n","start label 1\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/decomposition/_nmf.py:1425: FutureWarning: `alpha` was deprecated in version 1.0 and will be removed in 1.2. Use `alpha_W` and `alpha_H` instead\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"name":"stdout","output_type":"stream","text":["Topic 0\n","card consolidation debt consolidate cards pay payment loan want consolidating like bills monthly high loans medical higher rate need home lower paying payments accounts payoff years balances make time rates\n","Topic 0\n","card consolidate cards debt consolidation payment pay loan like consolidating want bills monthly high loans payments home higher rate paying need medical lower make payoff accounts years time balances looking\n","idf values: \n"," [('10', 6.043425116919247), ('22', 6.043425116919247), ('24', 6.043425116919247), ('29', 6.043425116919247), ('500', 6.043425116919247), ('ability', 6.043425116919247), ('able', 6.043425116919247), ('accumulated', 6.043425116919247), ('actually', 6.043425116919247), ('afford', 6.043425116919247), ('affordable', 6.043425116919247), ('ahead', 6.043425116919247), ('appreciate', 6.043425116919247), ('appreciated', 6.043425116919247), ('aprs', 6.043425116919247), ('assist', 6.043425116919247), ('best', 6.043425116919247), ('big', 6.043425116919247), ('bit', 6.043425116919247), ('bring', 6.043425116919247), ('budget', 6.043425116919247), ('business', 6.043425116919247), ('cancel', 6.043425116919247), ('capital', 6.043425116919247), ('carpeting', 6.043425116919247), ('central', 6.043425116919247), ('chase', 6.043425116919247), ('check', 6.043425116919247), ('closed', 6.043425116919247), ('college', 6.043425116919247)]\n","start label 2\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/decomposition/_nmf.py:1425: FutureWarning: `alpha` was deprecated in version 1.0 and will be removed in 1.2. Use `alpha_W` and `alpha_H` instead\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"name":"stdout","output_type":"stream","text":["Topic 0\n","pay cards credit card debt loan high payment want paying like need payoff bills rate monthly higher free loans car trying just month lower home personal payments money paid years\n","Topic 0\n","pay credit cards card debt loan payment high want paying like payoff need bills rate monthly higher month just free payments paid lower loans years trying money car home start\n","idf values: \n"," [('14', 6.281510248231656), ('200', 6.281510248231656), ('2014', 6.281510248231656), ('24', 6.281510248231656), ('26', 6.281510248231656), ('29', 6.281510248231656), ('300', 6.281510248231656), ('400', 6.281510248231656), ('500', 6.281510248231656), ('5000', 6.281510248231656), ('70', 6.281510248231656), ('75', 6.281510248231656), ('900', 6.281510248231656), ('accumulated', 6.281510248231656), ('acquired', 6.281510248231656), ('actually', 6.281510248231656), ('additional', 6.281510248231656), ('afford', 6.281510248231656), ('ago', 6.281510248231656), ('alot', 6.281510248231656), ('amounts', 6.281510248231656), ('applied', 6.281510248231656), ('appreciate', 6.281510248231656), ('approx', 6.281510248231656), ('approximately', 6.281510248231656), ('basically', 6.281510248231656), ('burn', 6.281510248231656), ('cc', 6.281510248231656), ('charge', 6.281510248231656), ('chase', 6.281510248231656)]\n","start label 3\n","Topic 0\n","improvement home improvements bills new pay debt loan repairs kitchen consolidation remodel like need update roof patio flooring sell house help bathroom buying remodeling needed card taxes adding buy improve\n","Topic 0\n","home improvement improvements new repairs house kitchen need remodel roof bathroom bills pay like replace loan bathrooms flooring upgrade windows repair remodeling property improve appliances build sell debt patio looking\n","idf values: \n"," [('000', 5.356708826689592), ('bath', 5.356708826689592), ('broke', 5.356708826689592), ('carpeting', 5.356708826689592), ('cash', 5.356708826689592), ('come', 5.356708826689592), ('company', 5.356708826689592), ('consideration', 5.356708826689592), ('countertops', 5.356708826689592), ('damage', 5.356708826689592), ('debts', 5.356708826689592), ('door', 5.356708826689592), ('efficiency', 5.356708826689592), ('efficient', 5.356708826689592), ('electricity', 5.356708826689592), ('exterior', 5.356708826689592), ('extra', 5.356708826689592), ('fencing', 5.356708826689592), ('finished', 5.356708826689592), ('fixed', 5.356708826689592), ('foreclosed', 5.356708826689592), ('funding', 5.356708826689592), ('garage', 5.356708826689592), ('gas', 5.356708826689592), ('going', 5.356708826689592), ('grass', 5.356708826689592), ('hard', 5.356708826689592), ('higher', 5.356708826689592), ('homes', 5.356708826689592), ('hope', 5.356708826689592)]\n","start label 4\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/decomposition/_nmf.py:1425: FutureWarning: `alpha` was deprecated in version 1.0 and will be removed in 1.2. Use `alpha_W` and `alpha_H` instead\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]},{"name":"stdout","output_type":"stream","text":["Topic 0\n","consolidation debt loan consolidate credit home pay payment cards wedding lower payments taxes bills repairs monthly debit consolidating reduce car tax improvement consilidation emergency repair loans improvements small years personal\n","Topic 0\n","consolidation debt consolidate loan consolidating debit payment credit home monthly pay loans cards payments lower expense debts bills consilidation taxes wedding repairs years car reduce repair paying consolodation improvement personal\n","idf values: \n"," [('amp', 5.897839799950911), ('auto', 5.897839799950911), ('bit', 5.897839799950911), ('build', 5.897839799950911), ('business', 5.897839799950911), ('dental', 5.897839799950911), ('dept', 5.897839799950911), ('existing', 5.897839799950911), ('expense', 5.897839799950911), ('family', 5.897839799950911), ('foundation', 5.897839799950911), ('general', 5.897839799950911), ('goal', 5.897839799950911), ('high', 5.897839799950911), ('higher', 5.897839799950911), ('house', 5.897839799950911), ('income', 5.897839799950911), ('incurred', 5.897839799950911), ('job', 5.897839799950911), ('large', 5.897839799950911), ('life', 5.897839799950911), ('like', 5.897839799950911), ('little', 5.897839799950911), ('make', 5.897839799950911), ('manageable', 5.897839799950911), ('medical', 5.897839799950911), ('needed', 5.897839799950911), ('paid', 5.897839799950911), ('place', 5.897839799950911), ('plan', 5.897839799950911)]\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/decomposition/_nmf.py:1425: FutureWarning: `alpha` was deprecated in version 1.0 and will be removed in 1.2. Use `alpha_W` and `alpha_H` instead\n","  FutureWarning,\n","/usr/local/lib/python3.7/dist-packages/sklearn/decomposition/_nmf.py:1641: ConvergenceWarning: Maximum number of iterations 200 reached. Increase it to improve convergence.\n","  ConvergenceWarning,\n"]}],"source":["from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n","from sklearn.decomposition import NMF, LatentDirichletAllocation\n","\n","def display_topics(model, feature_names, no_top_words):\n","    for topic_idx, topic in enumerate(model.components_):\n","        print(f\"Topic {topic_idx}\")\n","        print(\" \".join([feature_names[i]\n","        for i in topic.argsort()[:-no_top_words - 1:-1]]))\n","\n","# documents = np.array(dfl.desc.tolist())\n","no_features = 1000\n","\n","# NMF is able to use tf-idf\n","# tfidf_vectorizer = TfidfVectorizer(max_df=0.95, min_df=2, max_features=no_features, stop_words='english')\n","# tfidf_vectorizer = TfidfVectorizer(max_df=0.95, min_df=2, max_features=no_features, stop_words='english')\n","# t1 = tfidf_vectorizer.fit_transform(dfl[dfl.label==1].desc)\n","# tf_feature_names = tfidf_vectorizer.get_feature_names()\n","\n","# tfidf_vectorizer2 = TfidfVectorizer(max_df=0.95, min_df=2, max_features=no_features, stop_words='english')\n","# t2 = tfidf_vectorizer2.fit_transform(dfl[dfl.label==3].desc)\n","# tf_feature_names2 = tfidf_vectorizer2.get_feature_names()\n","\n","# tfidf_vectorizer3 = TfidfVectorizer(max_df=0.95, min_df=2, max_features=no_features, stop_words='english')\n","# t3 = tfidf_vectorizer3.fit_transform(dfl[dfl.label==4].desc)\n","# tf_feature_names3 = tfidf_vectorizer3.get_feature_names()\n","\n","# LDA can only use raw term counts for LDA because it is a probabilistic graphical model\n","# tf_vectorizer = CountVectorizer(max_df=0.95, min_df=2, max_features=no_features, stop_words='english')\n","# tf = tf_vectorizer.fit_transform(documents)\n","# tf_feature_names = tf_vectorizer.get_feature_names()\n","\n","# no_topics = 5\n","\n","# # Run NMF\n","# nmf = NMF(n_components=no_topics, random_state=1, alpha=.1, l1_ratio=.5, init='nndsvd').fit(tfidf)\n","\n","# # Run LDA\n","# lda = LatentDirichletAllocation(n_components=1, max_iter=5, learning_method='online', learning_offset=50.,random_state=0).fit(t1)\n","# lda2 = LatentDirichletAllocation(n_components=1, max_iter=5, learning_method='online', learning_offset=50.,random_state=0).fit(t2)\n","# lda3 = LatentDirichletAllocation(n_components=1, max_iter=5, learning_method='online', learning_offset=50.,random_state=0).fit(t3)\n","\n","no_top_words = 30\n","# display_topics(nmf, tfidf_feature_names, no_top_words)\n","# display_topics(lda, tf_feature_names, no_top_words)\n","# display_topics(lda2, tf_feature_names2, no_top_words)\n","# display_topics(lda3, tf_feature_names3, no_top_words)\n","\n","no_l = 5\n","for i in range(no_l):\n","  print(f'start label {i}')\n","  # tfidf_vectorizer = TfidfVectorizer(max_df=0.95, min_df=2, max_features=no_features, stop_words='english', ngram_range=(1,2))\n","  tfidf_vectorizer = TfidfVectorizer(max_df=0.95, min_df=2, max_features=no_features, stop_words='english')\n","  \n","  t1 = tfidf_vectorizer.fit_transform(dfl[dfl.label==i].desc)\n","  tf_feature_names = tfidf_vectorizer.get_feature_names()\n","  lda = LatentDirichletAllocation(n_components=1, max_iter=5, learning_method='online', learning_offset=50.,random_state=0).fit(t1)\n","  nmf = NMF(n_components=1, random_state=1, alpha=.1, l1_ratio=.5, init='nndsvd').fit(t1)\n","  display_topics(nmf, tf_feature_names, no_top_words)\n","\n","  display_topics(lda, tf_feature_names, no_top_words)\n","  print('idf values: \\n', sorted(list(zip(tf_feature_names,tfidf_vectorizer.idf_,)),\n","       key = lambda x: x[1], reverse=True)[:30])\n","\n","# print('idf values: \\n', sorted(list(zip(tf_feature_names3,tfidf_vectorizer3.idf_,)),\n","#        key = lambda x: x[1], reverse=True)[:20])\n","# print('idf values: \\n', sorted(list(zip(tf_feature_names2,tfidf_vectorizer2.idf_,)),\n","#        key = lambda x: x[1], reverse=True)[:20])\n","# print('idf values: \\n', sorted(list(zip(tf_feature_names,tfidf_vectorizer.idf_,)),\n","#        key = lambda x: x[1], reverse=True)[:20])"]},{"cell_type":"code","execution_count":26,"metadata":{"executionInfo":{"elapsed":123,"status":"ok","timestamp":1658596834912,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"mMLObkEj6w5H"},"outputs":[],"source":["# dfl[dfl.desc.apply(lambda x: '25' in x)].desc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":366,"status":"ok","timestamp":1658552126050,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"4DhA0LWmaL23","outputId":"0046ed50-0c47-4fb4-d190-72747422799f"},"outputs":[{"name":"stdout","output_type":"stream","text":["Topic 0\n","card consolidate cards debt consolidation payment pay loan like consolidating want bills monthly high loans payments home higher rate paying\n"]}],"source":["# display_topics(lda, tf_feature_names, 20)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":848,"status":"ok","timestamp":1658552062173,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"3DsMdVMeYqJh","outputId":"58273937-9819-44f6-c247-648ae1556695"},"outputs":[{"data":{"text/plain":["array([5.61015773, 5.8978398 , 5.8978398 , 5.38701418, 4.79922751,\n","       5.8978398 , 5.8978398 , 5.8978398 , 5.05054194, 4.28840189,\n","       5.61015773, 5.38701418, 3.62915626, 4.59855682, 1.14424961,\n","       5.61015773, 5.61015773, 3.95192965, 5.38701418, 5.20469262,\n","       1.11034806, 4.91701055, 5.8978398 , 5.8978398 , 5.61015773,\n","       5.38701418, 5.8978398 , 5.8978398 , 5.8978398 , 5.61015773,\n","       5.8978398 , 5.61015773, 5.38701418, 5.8978398 , 5.8978398 ,\n","       5.8978398 , 5.8978398 , 4.22386337, 5.8978398 , 5.38701418,\n","       5.61015773, 5.8978398 , 5.61015773, 5.8978398 , 5.8978398 ,\n","       5.8978398 , 5.8978398 , 5.8978398 , 5.8978398 , 3.70061522,\n","       5.20469262, 4.43150273, 5.8978398 , 5.38701418, 5.8978398 ,\n","       5.8978398 , 5.61015773, 5.38701418, 4.43150273, 5.8978398 ,\n","       5.20469262, 5.8978398 , 4.22386337, 5.05054194, 4.16323874,\n","       4.28840189, 5.38701418, 5.38701418, 5.8978398 , 5.8978398 ,\n","       5.8978398 , 5.8978398 , 5.20469262, 5.61015773, 5.20469262,\n","       5.20469262, 5.05054194, 5.61015773, 5.20469262, 5.8978398 ,\n","       5.61015773, 5.8978398 , 5.38701418, 5.8978398 , 5.8978398 ,\n","       5.8978398 , 5.61015773, 5.05054194, 5.8978398 , 5.61015773,\n","       5.8978398 , 5.8978398 , 5.8978398 , 5.8978398 , 5.61015773,\n","       5.38701418, 5.8978398 , 4.79922751])"]},"execution_count":61,"metadata":{},"output_type":"execute_result"}],"source":["# tfidf_vectorizer3.idf_"]},{"cell_type":"code","execution_count":29,"metadata":{"executionInfo":{"elapsed":274,"status":"ok","timestamp":1658596891516,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"VeBDZKDbC34k"},"outputs":[],"source":["inputs = dfl.desc.apply(model.encode)"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1658597258650,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"x3mkaU26GaRl","outputId":"332e3bbc-f62f-4edf-e1d4-6327cf8816ec"},"outputs":[{"data":{"text/plain":["7"]},"execution_count":46,"metadata":{},"output_type":"execute_result"}],"source":["len(dfl)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":166},"executionInfo":{"elapsed":314,"status":"error","timestamp":1658590147741,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"9Orsk0oyrQyj","outputId":"fc1d4418-ff47-4965-807e-0768c2a96a96"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-3-bbd1b46dc0cc\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[0;32m----\u003e 1\u001b[0;31m \u001b[0minputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'inputs' is not defined"]}],"source":["# inputs"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ue0q5b1P2xPI"},"outputs":[],"source":["# ! pip install hdbscan\n","# import hdbscan\n","# clusterer = hdbscan.HDBSCAN(min_cluster_size=)\n","# cluster_labels = clusterer.fit_predict(inputs)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"f6a91KhN3OYn"},"outputs":[],"source":["# cluster_labels = clusterer.fit_predict(i)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1658526329800,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"zH_p8PGm3d23","outputId":"c545212f-0818-46c2-ddc7-c38e8e1fa906"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n"]}],"source":["dfl['hdb'] = cluster_labels\n","res = dfl.groupby(['grade','hdb']).int_rate.mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":332,"status":"ok","timestamp":1658526375031,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"iDDmd2mW33KX","outputId":"2a0f44bc-0d7c-4b61-8ed2-5f9f0ddfe0b3"},"outputs":[{"data":{"text/plain":["grade  hdb\n","D      -1     18.064799\n","        0     18.153333\n","        1     17.765000\n","        2     18.220526\n","        3     17.932500\n","        4     17.412000\n","        5     17.932500\n","        6     18.105000\n","        7     17.250000\n","        8     17.823333\n","Name: int_rate, dtype: float64"]},"execution_count":33,"metadata":{},"output_type":"execute_result"}],"source":["res[:10]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YNiEp7yDDFbm"},"outputs":[],"source":["l = 0\n","for x in inputs:\n","  l = max(l, len(x))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1658546318397,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"iHx-UJzDEF2I","outputId":"394c20ac-f17f-49b0-d6bf-e30de29a7d1a"},"outputs":[{"data":{"text/plain":["384"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["l"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1080,"status":"ok","timestamp":1658546399366,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"moixKwtNEWRL","outputId":"4c65e80e-14b6-4e05-f123-5a2c78c87a0f"},"outputs":[{"name":"stdout","output_type":"stream","text":["384\n"]}],"source":["print(len(inputs.iloc[1]))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h6cqBaQLDykI"},"outputs":[],"source":["# for i, x in enumerate(inputs):\n","#   if len(x) \u003e l:\n","#     inputs.iloc[i] = x[:l]\n","#   else:\n","#     padding = [0] * (l - len(x))\n","#     inputs.iloc[i] = x + padding\n"]},{"cell_type":"code","execution_count":45,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":100,"status":"ok","timestamp":1658597242386,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"sggQ0_wuGWuu","outputId":"3f76c984-bdea-4114-e13c-0e8555ce4965"},"outputs":[{"data":{"text/plain":["122447    [0.05833099, -0.06812061, -0.058479227, -0.004...\n","185278    [0.04459793, 0.028322233, -0.0418253, 0.026227...\n","336614    [0.0061796927, 0.09961043, 0.02848614, -0.0415...\n","356713    [-0.016804513, -0.027302222, -0.0048201513, -0...\n","417593    [-0.03781818, -0.06585638, 0.027186992, 0.0238...\n","420668    [-0.025928438, -0.013380409, -0.010259996, 0.0...\n","702090    [-0.00043080942, -0.009549503, 0.058591377, -0...\n","Name: desc, dtype: object"]},"execution_count":45,"metadata":{},"output_type":"execute_result"}],"source":["inputs"]},{"cell_type":"code","execution_count":32,"metadata":{"executionInfo":{"elapsed":101,"status":"ok","timestamp":1658597018094,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"l6fawspUH3bi"},"outputs":[],"source":["i = np.array(inputs.to_list())"]},{"cell_type":"code","execution_count":40,"metadata":{"executionInfo":{"elapsed":94,"status":"ok","timestamp":1658597204614,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"TL4FcEogEMyO"},"outputs":[],"source":["from sklearn.decomposition import PCA\n","# pca = PCA(n_components=2)\n","pca = PCA(n_components=2)\n","# i = pca.fit_transform(i)\n"]},{"cell_type":"code","execution_count":41,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1658597205749,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"rfH0Ay13FC0N"},"outputs":[],"source":["i_down = pca.fit_transform(i)\n"]},{"cell_type":"code","execution_count":42,"metadata":{"executionInfo":{"elapsed":117,"status":"ok","timestamp":1658597206954,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"zl20jsLIFxL6"},"outputs":[],"source":["dfl['x'] = i_down[:,0]"]},{"cell_type":"code","execution_count":43,"metadata":{"executionInfo":{"elapsed":104,"status":"ok","timestamp":1658597208542,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"cP-kWlgxGAfm"},"outputs":[],"source":["dfl['y'] = i_down[:,1]"]},{"cell_type":"code","execution_count":44,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"elapsed":291,"status":"ok","timestamp":1658597230385,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"c702XnfjI4Ap","outputId":"153a23ed-516b-4503-e4ae-d11395bbcfb0"},"outputs":[{"data":{"text/plain":["\u003cmatplotlib.collections.PathCollection at 0x7fdbc2aad690\u003e"]},"execution_count":44,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYIAAAD4CAYAAADhNOGaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAQUUlEQVR4nO3df6jdd33H8eer+SF32Bpts7a5raZjMdDpMHopk+F0M5L6TxvUuYqyFNzKVgoDZyCh4B+VYWvQbWDZDLpRBWldiTHQyFWrIshSekucoUps7JTmptrrj1sQrzaN7/1xT+rN3U3uvT3n3HNzPs8HhPv9fr6f8/28PznJed3vj/u9qSokSe26ZNAFSJIGyyCQpMYZBJLUOINAkhpnEEhS49YOuoDzueKKK2rz5s2DLkOSLiqPPfbYT6tq43Jes2qDYPPmzUxMTAy6DEm6qCT50XJf46khSWqcQSBJjTMIJKlxBoEkNc4gkKTGrdq7hqRWHDw6yb7x45yanmHThhF279jKzm2jgy5LDTEIpAE6eHSSvQeOMXP6DACT0zPsPXAMwDDQivHUkDRA+8aPvxACZ82cPsO+8eMDqkgtMgikATo1PbOsdqkfDAJpgDZtGFlWu9QPBoE0QLt3bGVk3Zpz2kbWrWH3jq0Dqkgt8mKxNEBnLwh715AGySCQBmzntlE/+DVQnhqSpMYZBJLUOINAkhpnEEhS4wwCSWpcT4IgyY1Jjic5kWTPBfq9M0klGevFuJKk7nUdBEnWAPcCbweuB96T5PoF+l0K/APwSLdjSpJ6pxdHBDcAJ6rqyap6DrgfuHmBfh8G7gF+3YMxJUk90osgGAWemrN+stP2giSvB66tqocutKMktyWZSDIxNTXVg9IkSYvp+8XiJJcAHwf+cbG+VbW/qsaqamzjxo39Lk2SRG+CYBK4ds76NZ22sy4FXgN8I8kPgT8BDnnBWJJWh14EwaPAliTXJVkP3AIcOruxqp6tqiuqanNVbQaOADdV1UQPxpYkdanrIKiq54E7gHHge8Dnq+rxJHcluanb/UuS+qsnTx+tqsPA4XltHzpP37f0YkxJUm/4k8WS1DiDQJIaZxBIUuMMAklqnL+qUivi4NFJfy+vtEoZBOq7g0cn2XvgGDOnzwAwOT3D3gPHAAwDaRXw1JD6bt/48RdC4KyZ02fYN358QBVJmssgUN+dmp5ZVruklWUQqO82bRhZVruklWUQqO9279jKyLo157SNrFvD7h1bB1SRpLm8WKy+O3tB2LuGpNXJINCK2Llt1A9+aZUyCLrk/fGSLnYGQRe8P17SMPBicRe8P17SMDAIuuD98ZKGgUHQBe+PlzQMDIIueH+8pGHgxeIueH+8pGFgEHTJ++MlXew8NSRJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJalxPgiDJjUmOJzmRZM8C2z+Q5LtJvpPk4SSv6sW4kqTudR0ESdYA9wJvB64H3pPk+nndjgJjVfXHwIPAR7sdV5LUG704IrgBOFFVT1bVc8D9wM1zO1TV16vqV53VI8A1PRhXktQDvQiCUeCpOesnO23n837gSwttSHJbkokkE1NTUz0oTZK0mBW9WJzkfcAYsG+h7VW1v6rGqmps48aNK1maJDVrbQ/2MQlcO2f9mk7bOZJsB+4E3lxVv+nBuJKkHujFEcGjwJYk1yVZD9wCHJrbIck24JPATVX1TA/GlCT1SNdBUFXPA3cA48D3gM9X1eNJ7kpyU6fbPuClwH8l+XaSQ+fZnSRphfXi1BBVdRg4PK/tQ3OWt/diHElS7/mTxZLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuN6EgRJbkxyPMmJJHsW2P6SJA90tj+SZHMvxpUkda/rIEiyBrgXeDtwPfCeJNfP6/Z+4BdV9YfAPwP3dDuuJKk3enFEcANwoqqerKrngPuBm+f1uRm4r7P8IPDWJOnB2JKkLvUiCEaBp+asn+y0Ldinqp4HngUu78HYkqQuraqLxUluSzKRZGJqamrQ5UhSE3oRBJPAtXPWr+m0LdgnyVrgZcDP5u+oqvZX1VhVjW3cuLEHpUmSFtOLIHgU2JLkuiTrgVuAQ/P6HAJ2dZbfBXytqqoHY0uSurS22x1U1fNJ7gDGgTXAf1TV40nuAiaq6hDwaeCzSU4AP2c2LCRJq0DXQQBQVYeBw/PaPjRn+dfAX/ZiLElSb62qi8WSpJVnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhq3dtAFSNKgHDw6yb7x45yanmHThhF279jKzm2jgy5rxRkEkpp08Ogkew8cY+b0GQAmp2fYe+AYQHNh4KkhSU3aN378hRA4a+b0GfaNHx9QRYNjEEhq0qnpmWW1DzODQFKTNm0YWVb7MDMIJDVp946tjKxbc07byLo17N6xdUAVDY4XiyU16ewFYe8aMggkNWznttEmP/jn89SQJDXOIJCkxhkEktS4rq4RJHkF8ACwGfgh8O6q+sW8Pq8D/g24DDgD/FNVPdDNuJI0jAb1yItujwj2AA9X1Rbg4c76fL8C/rqq/gi4EfiXJBu6HFeShsrZR15MTs9Q/O6RFwePTvZ97G6D4Gbgvs7yfcDO+R2q6vtV9URn+RTwDLCxy3ElaagM8pEX3QbBlVX1dGf5x8CVF+qc5AZgPfCD82y/LclEkompqakuS5Oki8cgH3mx6DWCJF8Frlpg051zV6qqktQF9nM18FlgV1X9dqE+VbUf2A8wNjZ23n1J0rDZtGGEyQU+9FfikReLBkFVbT/ftiQ/SXJ1VT3d+aB/5jz9LgMeAu6sqiMvulpJGlK7d2w957HYsHKPvOj21NAhYFdneRfwxfkdkqwHvgB8pqoe7HI8SRpKO7eN8pF3vJbRDSMEGN0wwkfe8doVuWsoVS/+DEySy4HPA68EfsTs7aM/TzIG/F1V/U2S9wH/CTw+56W3VtW3L7TvsbGxmpiYeNG1SVKLkjxWVWPLek03QdBPBoEkLd+LCQJ/sliSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY1bO+gCeu3g0Un2jR/n1PQMmzaMsHvHVnZuGx10WZK0ag1VEBw8OsneA8eYOX0GgMnpGfYeOAZgGEjSeQzVqaF948dfCIGzZk6fYd/48QFVJEmr31AFwanpmWW1S5KGLAg2bRhZVrskaciCYPeOrYysW3NO28i6NezesXVAFUnS6jdUF4vPXhD2riFJWrqhCgKYDQM/+CVp6Ybq1JAkafkMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGtdVECR5RZKvJHmi8/XlF+h7WZKTST7RzZiSpN7q9ohgD/BwVW0BHu6sn8+HgW92OZ4kqce6DYKbgfs6y/cBOxfqlOQNwJXAl7scT5LUY90GwZVV9XRn+cfMftifI8klwMeADy62syS3JZlIMjE1NdVlaZKkpVj0oXNJvgpctcCmO+euVFUlqQX63Q4crqqTSS44VlXtB/YDjI2NLbQvSVKPLRoEVbX9fNuS/CTJ1VX1dJKrgWcW6PZG4E1JbgdeCqxP8suqutD1BEnSCun2MdSHgF3A3Z2vX5zfoaree3Y5ya3AmCGwNAePTvq7FST1XbfXCO4G3pbkCWB7Z50kY0k+1W1xLTt4dJK9B44xOT1DAZPTM+w9cIyDRycHXZqkIZOq1XkqfmxsrCYmJgZdxsD86d1fY3J65v+1j24Y4Vt7/mIAFUm6GCR5rKrGlvMaf7J4lTq1QAhcqF2SXiyDYJXatGFkWe2S9GIZBKvU7h1bGVm35py2kXVr2L1j64AqkjSshu6X1w+Ls3cHedeQpH4zCFaxndtG/eCX1HeeGpKkxhkEktQ4g0CSGmcQSFLjDAJJatyqfcREkingR30e5grgp30eYzVqcd4tzhnanHeLc4bfzftVVbVxOS9ctUGwEpJMLPeZHMOgxXm3OGdoc94tzhm6m7enhiSpcQaBJDWu9SDYP+gCBqTFebc4Z2hz3i3OGbqYd9PXCCRJHhFIUvMMAklqXFNBkOQVSb6S5InO15dfoO9lSU4m+cRK1tgPS5l3ktcl+e8kjyf5TpK/GkSt3UpyY5LjSU4k2bPA9pckeaCz/ZEkm1e+yt5bwrw/kOS7nff24SSvGkSdvbTYnOf0e2eSSjIUt5QuZd5J3t15vx9P8rlFd1pVzfwBPgrs6SzvAe65QN9/BT4HfGLQda/EvIFXA1s6y5uAp4ENg659mfNcA/wA+ANgPfA/wPXz+twO/Htn+RbggUHXvULz/nPg9zrLf3+xz3spc+70uxT4JnAEGBt03Sv0Xm8BjgIv76z//mL7beqIALgZuK+zfB+wc6FOSd4AXAl8eYXq6rdF511V36+qJzrLp4BngGX9dOIqcANwoqqerKrngPuZnftcc/8uHgTemiQrWGM/LDrvqvp6Vf2qs3oEuGaFa+y1pbzXAB8G7gF+vZLF9dFS5v23wL1V9QuAqnpmsZ22FgRXVtXTneUfM/thf44klwAfAz64koX12aLznivJDcx+t/GDfhfWY6PAU3PWT3baFuxTVc8DzwKXr0h1/bOUec/1fuBLfa2o/xadc5LXA9dW1UMrWVifLeW9fjXw6iTfSnIkyY2L7XTofkNZkq8CVy2w6c65K1VVSRa6d/Z24HBVnbyYvlHswbzP7udq4LPArqr6bW+r1KAleR8wBrx50LX0U+cbuo8Dtw64lEFYy+zpobcwe+T3zSSvrarpC71gqFTV9vNtS/KTJFdX1dOdD7yFDpneCLwpye3AS4H1SX5ZVee9GLUa9GDeJLkMeAi4s6qO9KnUfpoErp2zfk2nbaE+J5OsBV4G/GxlyuubpcybJNuZ/cbgzVX1mxWqrV8Wm/OlwGuAb3S+obsKOJTkpqqaWLEqe28p7/VJ4JGqOg38b5LvMxsMj55vp62dGjoE7Oos7wK+OL9DVb23ql5ZVZuZPT30mdUeAkuw6LyTrAe+wOx8H1zB2nrpUWBLkus687mF2bnPNffv4l3A16pzRe0itui8k2wDPgnctJRzxheBC865qp6tqiuqanPn//IRZud+MYcALO3f+EFmjwZIcgWzp4qevNBOWwuCu4G3JXkC2N5ZJ8lYkk8NtLL+Wsq83w38GXBrkm93/rxuMOW+OJ1z/ncA48D3gM9X1eNJ7kpyU6fbp4HLk5wAPsDsXVQXtSXOex+zR7j/1Xlv5394XFSWOOehs8R5jwM/S/Jd4OvA7qq64FGvj5iQpMa1dkQgSZrHIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmN+z92tclNk+mwnwAAAABJRU5ErkJggg==\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","plt.scatter(i_down[:,0], i_down[:,1])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":871,"status":"ok","timestamp":1658549366865,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"IaziwqnmGZLz","outputId":"8d4e7567-832e-4f86-b1e5-a7eca248670a"},"outputs":[{"data":{"text/plain":["\u003cmatplotlib.legend.Legend at 0x7f1f7379bc50\u003e"]},"execution_count":49,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# import numpy as np\n","# import matplotlib.pyplot as plt\n","import matplotlib.cm as cm\n","\n","# x = np.arange(10)\n","# ys = [i+x+(i*x)**2 for i in range(10)]\n","fig, ax = plt.subplots()\n","colors = cm.rainbow(np.linspace(0, 1, 8))\n","for lab, c in zip(range(8), colors):\n","    plt.scatter(dfl[dfl.label==lab].x, dfl[dfl.label==lab].y, color=c, label=lab)\n","ax.legend()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":618,"status":"ok","timestamp":1658553906958,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"wxw_8I61ehE0","outputId":"61f1974e-81f7-481b-8d4e-183c8080325c"},"outputs":[{"data":{"text/plain":["\u003cmatplotlib.legend.Legend at 0x7f1f81238f90\u003e"]},"execution_count":85,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.cm as cm\n","\n","# x = np.arange(10)\n","# ys = [i+x+(i*x)**2 for i in range(10)]\n","fig, ax = plt.subplots()\n","colors = cm.rainbow(np.linspace(0, 1, 5))\n","for lab, c in zip(range(5), colors):\n","    plt.scatter(dfl[dfl.label5==lab].x, dfl[dfl.label5==lab].y, color=c, label=lab)\n","ax.legend()"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":599},"executionInfo":{"elapsed":406,"status":"error","timestamp":1658597184836,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"xvE87J6kGD65","outputId":"5cce11e0-f727-41ea-d3de-336d48941923"},"outputs":[{"ename":"AttributeError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-39-2e7224bfa62a\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mcolors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrainbow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mlab\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 8\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdfl\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdfl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel55\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mlab\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdfl\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdfl\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel55\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mlab\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlab\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u003e\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'x'"]},{"data":{"image/png":"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\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.cm as cm\n","import matplotlib.pyplot as plt\n","# x = np.arange(10)\n","# ys = [i+x+(i*x)**2 for i in range(10)]\n","fig, ax = plt.subplots()\n","colors = cm.rainbow(np.linspace(0, 1, 5))\n","for lab, c in zip(range(5), colors):\n","    plt.scatter(dfl[dfl.label55==lab].x, dfl[dfl.label55==lab].y, color=c, label=lab)\n","ax.legend()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"elapsed":1785,"status":"ok","timestamp":1658554904106,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"HYgPG7-kkucd","outputId":"6fd040a6-487b-4190-8f37-74a07d8ffc6d"},"outputs":[{"data":{"text/plain":["\u003cmatplotlib.legend.Legend at 0x7f1f8cc12b90\u003e"]},"execution_count":93,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.cm as cm\n","\n","# x = np.arange(10)\n","# ys = [i+x+(i*x)**2 for i in range(10)]\n","fig, ax = plt.subplots()\n","colors = cm.rainbow(np.linspace(0, 1, 10))\n","for lab, c in zip(range(10), colors):\n","    plt.scatter(dfl[dfl.label10==lab].x, dfl[dfl.label10==lab].y, color=c, label=lab)\n","ax.legend()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eYy8P66UMEnU"},"outputs":[],"source":["# from collections import Counter\n","# list1=['apple','egg','apple','banana','egg','apple']\n","# counts = Counter(list1)\n","# print(counts)"]},{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":260,"status":"ok","timestamp":1658597030653,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"yRp0bnJMKON5"},"outputs":[],"source":["from sklearn.cluster import KMeans\n","k = KMeans(n_clusters=5)\n","labels = k.fit_predict(i5)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":946,"status":"ok","timestamp":1658561156791,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"QI6LpRgXLY3K","outputId":"900abd06-5b42-4f66-fe91-5460b9180015"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["' Loan and credit card debt consolidation'"]},"execution_count":109,"metadata":{},"output_type":"execute_result"}],"source":["dfl[dfl.label10==8].desc.iloc[1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oq_T57pyExM3"},"outputs":[],"source":["# labels = pca.fit_transform(i)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1031,"status":"ok","timestamp":1658546525740,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"KMvi_ByjEzrY","outputId":"d9918695-7d5b-48cd-b125-594c50fc0bf5"},"outputs":[{"data":{"text/plain":["array([-0.23185904, -0.01462582], dtype=float32)"]},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":["labels[0]"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":116,"status":"ok","timestamp":1658597133466,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"2UZOpYcWKroi","outputId":"409228bc-8919-406b-a0bf-00092ab1ecc4"},"outputs":[{"data":{"text/plain":["122447    2\n","185278    4\n","336614    1\n","356713    0\n","417593    0\n","420668    3\n","702090    0\n","Name: label55, dtype: int32"]},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":["dfl['label55']"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1658559762625,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"4gU5z8ESedXl","outputId":"74ec4cdf-e6bf-425a-9bdf-5852b2908130"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n"]}],"source":["dfl['label5d'] = labels"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":102,"status":"ok","timestamp":1658597053739,"user":{"displayName":"Chenxin Fang","userId":"14622704630559890497"},"user_tz":420},"id":"9KhwmDz-K7fx","outputId":"61b681f1-4b9c-48dc-c902-3b9d0c252bb7"},"outputs":[{"data":{"text/plain":["label55  grade\n","0        D        17.77\n","         G        25.99\n","1        D        17.57\n","2        E        18.25\n","3        D        16.49\n","4        E        18.55\n","Name: int_rate, dtype: float64"]},"execution_count":36,"metadata":{},"output_type":"execute_result"}],"source":["dfl.groupby(['label55', 'grade']).int_rate.mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":924,"status":"ok","timestamp":1658549543443,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"ac2YxbezQWmo","outputId":"c267dade-2850-49e9-ee93-995fbf641c16"},"outputs":[{"data":{"text/plain":["label  grade\n","0      D        276\n","       E        101\n","       F         32\n","       G         10\n","1      D        313\n","       E        113\n","       F         30\n","       G          8\n","2      D        425\n","       E        122\n","       F         37\n","       G          5\n","3      D        145\n","       E         66\n","       F         15\n","       G          7\n","4      D        274\n","       E         95\n","       F         24\n","       G          8\n","5      D        138\n","       E         86\n","       F         37\n","       G         15\n","6      D        424\n","       E        163\n","       F         55\n","       G         11\n","7      D        282\n","       E        114\n","       F         35\n","       G          8\n","Name: int_rate, dtype: int64"]},"execution_count":52,"metadata":{},"output_type":"execute_result"}],"source":["dfl.groupby(['label', 'grade']).int_rate.count()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8DIi2OUBliNO"},"outputs":[],"source":["dfl"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":472,"status":"ok","timestamp":1658547574590,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"aWJxXKFiIkqu","outputId":"a3a5d057-42dd-4189-e7df-418f9268b478"},"outputs":[{"data":{"text/plain":["1309279     Consolidating debt in order to have lower int...\n","1309286                 Consolidating debt into one account.\n","1309379              Loan and credit card debt consolidation\n","1309380     Debt consolidation, reducing monthly payments...\n","1309572                             Debt consolidation. Will\n","                                 ...                        \n","1352179       For debt consolidation and for major purchases\n","1352288                                   Debt Consolidation\n","1352426         Debt Consolidation so that I can start fresh\n","1352484                                  Debit consolidation\n","1352646                                  bill consolidation.\n","Name: desc, Length: 485, dtype: object"]},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":["dfl[dfl.label == 1].desc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2,"status":"ok","timestamp":1658547587486,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"U2p-pehqI6nT","outputId":"2f833af8-3078-4dc3-8324-bc5dbf738805"},"outputs":[{"data":{"text/plain":["336192                                                      \n","1029717                                                     \n","1033282                                                     \n","1146588    Looking to borrow to purchase a used boat we a...\n","1309209                                  to pay medical bill\n","                                 ...                        \n","1352309                           To cover medical expenses.\n","1352402                                    medical treatment\n","1352420     Consolidation of some high interest rate acco...\n","1352641     we need to upgrade our windows and pay off th...\n","1352644                         Having major medical surgery\n","Name: desc, Length: 572, dtype: object"]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["dfl[dfl.label == 2].desc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":455,"status":"ok","timestamp":1658561371640,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"0pnM1KbP9heV","outputId":"441284de-36a4-4b3a-9192-493c37c38ba3"},"outputs":[{"data":{"text/plain":["1309360     I'd like to consolidate my credit cards into ...\n","1309373     Consolidate credit card debt acquired to pay ...\n","1309379              Loan and credit card debt consolidation\n","1309384     Loan will be used to consolidate loans and cr...\n","1309443     I will be consolidating my credit card debt. ...\n","                                 ...                        \n","1351972     Bought a house a year ago and I want to elimi...\n","1352079              I will be consolidating my credit cards\n","1352360     Consolidated 5 credit cards with different aprs.\n","1352483     We want to consolidate all credit cards into ...\n","1352673     I am going to consolidate a credit card debt ...\n","Name: desc, Length: 464, dtype: object"]},"execution_count":113,"metadata":{},"output_type":"execute_result"}],"source":["dfl[dfl.label == 1].desc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":338,"status":"ok","timestamp":1658526655440,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"bb9Em-zx5Fje","outputId":"c2f16144-8c6e-47b3-8551-44b9c3b6b7f8"},"outputs":[{"data":{"text/plain":["label  grade\n","0      D        18.078329\n","       E        21.364489\n","       F        24.283008\n","       G        25.873429\n","1      D        17.949767\n","       E        21.563676\n","       F        24.290250\n","       G        25.860000\n","2      D        17.980078\n","       E        21.571087\n","       F        24.159231\n","       G        26.060000\n","3      D        18.089750\n","       E        21.223692\n","       F        24.486111\n","       G        25.883750\n","4      D        18.052064\n","       E        21.454479\n","       F        24.253770\n","       G        25.884286\n","Name: int_rate, dtype: float64"]},"execution_count":36,"metadata":{},"output_type":"execute_result"}],"source":["dfl.groupby(['label', 'grade']).int_rate.mean()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":317,"status":"ok","timestamp":1658561686870,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"tmliMHVB9WOb","outputId":"d4487a39-a12d-457a-c60e-0576d93a5f05"},"outputs":[{"data":{"text/plain":["122447     I would like to consolidate my loan in one sma...\n","1309205     Looking to consolidate debt as well as purcha...\n","1309264                                    Consolidate bills\n","1309285                I would like to consolidate my debts.\n","1309286                 Consolidating debt into one account.\n","                                 ...                        \n","1352103     Like to consolidate my loans into one loan pa...\n","1352430     I would like to consolidate six small loans t...\n","1352462     I would like to eliminate some credit cards a...\n","1352630                                   Consolidate bills.\n","1763472    I currently have a loan out with CashCall. The...\n","Name: desc, Length: 419, dtype: object"]},"execution_count":117,"metadata":{},"output_type":"execute_result"}],"source":["dfl[dfl.label == 0].desc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":336,"status":"ok","timestamp":1658526781547,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"QVJ-NcTM5UaS","outputId":"1a644981-e27e-40aa-f4e8-8a974c046509"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["' Consolidate bills'"]},"execution_count":40,"metadata":{},"output_type":"execute_result"}],"source":["dfl[dfl.label==2].iloc[0].desc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1658526786155,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"_UD8hz8b5fhW","outputId":"5d06df6b-0f1d-4578-e5ef-d834db8b43e1"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["' Consolidating debt in order to have lower interest rate'"]},"execution_count":41,"metadata":{},"output_type":"execute_result"}],"source":["dfl[dfl.label==1].iloc[0].desc"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"BwZU93cYsWPT"},"outputs":[],"source":["df_t = pd.concat([df[df.loan_status == 'Fully Paid'][:8500], df[df.loan_status == 'Charged Off'], df[df.loan_status == 'Default']])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UH0lIWcoeBKP"},"outputs":[],"source":["\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","BERT_MODEL = \"bert-base-uncased\"\n","\n","\n","label2idx = {\n","    'Fully Paid':1,\n","    'Charged Off':0,\n","    'Default':0\n","          }\n","\n","BATCH_SIZE = 16\n","\n","l = len(df_t)\n","\n","\n","tokenizer = BertTokenizer.from_pretrained(BERT_MODEL)\n","model = BertForSequenceClassification.from_pretrained(BERT_MODEL, num_labels = 2)\n","model.to(device)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vDWNyD3RfmAM"},"outputs":[],"source":["import logging\n","import numpy as np\n","\n","logging.basicConfig(format = '%(asctime)s - %(levelname)s - %(name)s -   %(message)s',\n","                    datefmt = '%m/%d/%Y %H:%M:%S',\n","                    level = logging.INFO)\n","logger = logging.getLogger(__name__)\n","\n","MAX_SEQ_LENGTH=100\n","\n","class BertInputItem(object):\n","    \"\"\"An item with all the necessary attributes for finetuning BERT.\"\"\"\n","\n","    def __init__(self, text, input_ids, input_mask, segment_ids, label_id):\n","        self.text = text\n","        self.input_ids = input_ids\n","        self.input_mask = input_mask\n","        self.segment_ids = segment_ids\n","        self.label_id = label_id\n","        \n","\n","def convert_examples_to_inputs(example_texts, example_labels, label2idx, max_seq_length, tokenizer, verbose=0):\n","    \"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"\n","    \n","    input_items = []\n","    examples = zip(example_texts, example_labels)\n","    for (ex_index, (text, label)) in enumerate(examples):\n","\n","        # Create a list of token ids\n","        input_ids = tokenizer.encode(f\"[CLS] {text} [SEP]\")\n","        if len(input_ids) \u003e max_seq_length:\n","            input_ids = input_ids[:max_seq_length]\n","\n","        # All our tokens are in the first input segment (id 0).\n","        segment_ids = [0] * len(input_ids)\n","\n","        # The mask has 1 for real tokens and 0 for padding tokens. Only real\n","        # tokens are attended to.\n","        input_mask = [1] * len(input_ids)\n","\n","        # Zero-pad up to the sequence length.\n","        padding = [0] * (max_seq_length - len(input_ids))\n","        input_ids += padding\n","        input_mask += padding\n","        segment_ids += padding\n","\n","        assert len(input_ids) == max_seq_length\n","        assert len(input_mask) == max_seq_length\n","        assert len(segment_ids) == max_seq_length\n","\n","        label_id = label2idx[label]\n","\n","        input_items.append(\n","            BertInputItem(text=text,\n","                          input_ids=input_ids,\n","                          input_mask=input_mask,\n","                          segment_ids=segment_ids,\n","                          label_id=label_id))\n","\n","        \n","    return input_items\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mKbz9g8ZWdKk"},"outputs":[],"source":["from torch.utils.data import TensorDataset, DataLoader, SequentialSampler\n","\n","def get_data_loader(features, max_seq_length, batch_size, shuffle=True): \n","\n","    all_input_ids = torch.tensor([f.input_ids for f in features], dtype=torch.long)\n","    all_input_mask = torch.tensor([f.input_mask for f in features], dtype=torch.long)\n","    all_segment_ids = torch.tensor([f.segment_ids for f in features], dtype=torch.long)\n","    all_label_ids = torch.tensor([f.label_id for f in features], dtype=torch.long)\n","    data = TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)\n","\n","    dataloader = DataLoader(data, shuffle=shuffle, batch_size=batch_size)\n","    return dataloader\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wYG2csXRhG8Y"},"outputs":[],"source":["def evaluate(model, dataloader):\n","    model.eval()\n","    \n","    eval_loss = 0\n","    nb_eval_steps = 0\n","    predicted_labels, correct_labels = [], []\n","\n","    for step, batch in enumerate(tqdm(dataloader, desc=\"Evaluation iteration\")):\n","        batch = tuple(t.to(device) for t in batch)\n","        input_ids, input_mask, segment_ids, label_ids = batch\n","\n","        with torch.no_grad():\n","            outputs = model(input_ids, attention_mask=input_mask,\n","                                          token_type_ids=segment_ids, labels=label_ids)\n","            tmp_eval_loss, logits = outputs[0], outputs[1]\n","\n","        # print(tmp_eval_loss, logits)\n","        outputs = np.argmax(logits.to('cpu'), axis=1)\n","        label_ids = label_ids.to('cpu').numpy()\n","        \n","        predicted_labels += list(outputs)\n","        correct_labels += list(label_ids)\n","        \n","        eval_loss += tmp_eval_loss.mean().item()\n","        nb_eval_steps += 1\n","\n","    eval_loss = eval_loss / nb_eval_steps\n","    \n","    correct_labels = np.array(correct_labels)\n","    predicted_labels = np.array(predicted_labels)\n","        \n","    return eval_loss, correct_labels, predicted_labels"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9350,"status":"ok","timestamp":1658356664370,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"lmb9gH7QftOc","outputId":"02ebc2f7-8a93-4320-a8c4-d8f7f8fcb30f"},"outputs":[{"name":"stderr","output_type":"stream","text":["Token indices sequence length is longer than the specified maximum sequence length for this model (517 \u003e 512). Running this sequence through the model will result in indexing errors\n"]}],"source":["\n","df_t = df_t.sample(frac=1).reset_index(drop=True)\n","train_texts, train_labels = df_t['desc'][:int(0.8*l)], df_t['loan_status'][:int(0.8*l)]\n","dev_texts, dev_labels = df_t['desc'][int(0.8*l):], df_t['loan_status'][int(0.8*l):]\n","\n","\n","train_features = convert_examples_to_inputs(train_texts, train_labels, label2idx, MAX_SEQ_LENGTH, tokenizer, verbose=0)\n","dev_features = convert_examples_to_inputs(dev_texts, dev_labels, label2idx, MAX_SEQ_LENGTH, tokenizer)\n","\n","train_dataloader = get_data_loader(train_features, MAX_SEQ_LENGTH, BATCH_SIZE, shuffle=True)\n","dev_dataloader = get_data_loader(dev_features, MAX_SEQ_LENGTH, BATCH_SIZE, shuffle=False)\n","# test_dataloader = get_data_loader(test_features, MAX_SEQ_LENGTH, BATCH_SIZE, shuffle=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7368,"status":"ok","timestamp":1658356671729,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"03PjG_7ahJ34","outputId":"bcbb7540-21b4-4b24-c455-c9157447ee6c"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/transformers/optimization.py:310: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n","  FutureWarning,\n"]}],"source":["from transformers import AdamW, get_linear_schedule_with_warmup\n","\n","GRADIENT_ACCUMULATION_STEPS = 1\n","NUM_TRAIN_EPOCHS = 20\n","LEARNING_RATE = 5e-5\n","WARMUP_PROPORTION = 0.1\n","MAX_GRAD_NORM = 5\n","\n","num_train_steps = int(len(train_dataloader.dataset) / BATCH_SIZE / GRADIENT_ACCUMULATION_STEPS * NUM_TRAIN_EPOCHS)\n","num_warmup_steps = int(WARMUP_PROPORTION * num_train_steps)\n","\n","param_optimizer = list(model.named_parameters())\n","no_decay = ['bias', 'LayerNorm.bias', 'LayerNorm.weight']\n","optimizer_grouped_parameters = [\n","    {'params': [p for n, p in param_optimizer if not any(nd in n for nd in no_decay)], 'weight_decay': 0.01},\n","    {'params': [p for n, p in param_optimizer if any(nd in n for nd in no_decay)], 'weight_decay': 0.0}\n","    ]\n","\n","optimizer = AdamW(optimizer_grouped_parameters, lr=LEARNING_RATE, correct_bias=False)\n","scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=num_warmup_steps, num_training_steps=num_train_steps)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VclBE9t2ib5r"},"outputs":[],"source":["import os\n","from tqdm import trange\n","from tqdm import tqdm_notebook as tqdm\n","from sklearn.metrics import classification_report, precision_recall_fscore_support\n","\n","OUTPUT_DIR = \"/tmp/\"\n","MODEL_FILE_NAME = \"pytorch_model.bin\""]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":620},"id":"tXasvB5AhTtc","outputId":"df4c3fce-aecb-42b9-8dd8-1ba7cd00a339"},"outputs":[{"name":"stderr","output_type":"stream","text":["\rEpoch:   0%|          | 0/20 [00:00\u003c?, ?it/s]/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:10: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\n","Please use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n","  # Remove the CWD from sys.path while we load stuff.\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"f698400144dd42b683d2e27e3f66eedf","version_major":2,"version_minor":0},"text/plain":["Training iteration:   0%|          | 0/546 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:8: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\n","Please use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n","  \n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e5edb06d60954f1494621f48b91bd27f","version_major":2,"version_minor":0},"text/plain":["Evaluation iteration:   0%|          | 0/137 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Loss history: []\n","Dev loss: 0.4782133987785256\n"]},{"name":"stderr","output_type":"stream","text":["\rEpoch:   5%|▌         | 1/20 [02:54\u003c55:18, 174.68s/it]"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"21d3fcab9df94744bb8f65fbcb64fff5","version_major":2,"version_minor":0},"text/plain":["Training iteration:   0%|          | 0/546 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3f622f4342a8467a8b678e13091958ba","version_major":2,"version_minor":0},"text/plain":["Evaluation iteration:   0%|          | 0/137 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Loss history: [0.4782133987785256]\n","Dev loss: 0.4356570721325213\n"]},{"name":"stderr","output_type":"stream","text":["\rEpoch:  10%|█         | 2/20 [05:46\u003c51:54, 173.05s/it]"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"86f5b2f54e334dd99bb96ee8ab5d2baf","version_major":2,"version_minor":0},"text/plain":["Training iteration:   0%|          | 0/546 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"e8287b0eeaaf40cba99737d4b65317e9","version_major":2,"version_minor":0},"text/plain":["Evaluation iteration:   0%|          | 0/137 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Loss history: [0.4782133987785256, 0.4356570721325213]\n","Dev loss: 0.43543878502219263\n"]},{"name":"stderr","output_type":"stream","text":["\rEpoch:  15%|█▌        | 3/20 [08:38\u003c48:51, 172.43s/it]"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"68f942b9fee64e5f9c890384e4ac8c49","version_major":2,"version_minor":0},"text/plain":["Training iteration:   0%|          | 0/546 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"1c0e9d7737c54360912682afb7b49143","version_major":2,"version_minor":0},"text/plain":["Evaluation iteration:   0%|          | 0/137 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stderr","output_type":"stream","text":["\rEpoch:  20%|██        | 4/20 [11:28\u003c45:47, 171.70s/it]"]},{"name":"stdout","output_type":"stream","text":["Loss history: [0.4782133987785256, 0.4356570721325213, 0.43543878502219263]\n","Dev loss: 0.4390385066070696\n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"36a050606e25425a988c86ddac8a1e3c","version_major":2,"version_minor":0},"text/plain":["Training iteration:   0%|          | 0/546 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"}],"source":["\n","PATIENCE = 2\n","\n","loss_history = []\n","no_improvement = 0\n","for _ in trange(int(NUM_TRAIN_EPOCHS), desc=\"Epoch\"):\n","    model.train()\n","    tr_loss = 0\n","    nb_tr_examples, nb_tr_steps = 0, 0\n","    for step, batch in enumerate(tqdm(train_dataloader, desc=\"Training iteration\")):\n","        batch = tuple(t.to(device) for t in batch)\n","        input_ids, input_mask, segment_ids, label_ids = batch\n","\n","        outputs = model(input_ids, attention_mask=input_mask, token_type_ids=segment_ids, labels=label_ids)\n","        loss = outputs[0]\n","\n","        if GRADIENT_ACCUMULATION_STEPS \u003e 1:\n","            loss = loss / GRADIENT_ACCUMULATION_STEPS\n","\n","        loss.backward()\n","        tr_loss += loss.item()\n","\n","        if (step + 1) % GRADIENT_ACCUMULATION_STEPS == 0:\n","            torch.nn.utils.clip_grad_norm_(model.parameters(), MAX_GRAD_NORM)  \n","            \n","            optimizer.step()\n","            optimizer.zero_grad()\n","            scheduler.step()\n","            \n","    dev_loss, _, _ = evaluate(model, dev_dataloader)\n","    \n","    print(\"Loss history:\", loss_history)\n","    print(\"Dev loss:\", dev_loss)\n","    \n","    if len(loss_history) == 0 or dev_loss \u003c min(loss_history):\n","        no_improvement = 0\n","        model_to_save = model.module if hasattr(model, 'module') else model\n","        output_model_file = os.path.join(OUTPUT_DIR, MODEL_FILE_NAME)\n","        torch.save(model_to_save.state_dict(), output_model_file)\n","    else:\n","        no_improvement += 1\n","    \n","    if no_improvement \u003e= PATIENCE: \n","        print(\"No improvement on development set. Finish training.\")\n","        break\n","        \n","    \n","    loss_history.append(dev_loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y1QHHWSQrUUR"},"outputs":[],"source":["for i, x in enumerate(predicted_labels):\n","  if x != 1:\n","    print(i)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"executionInfo":{"elapsed":46709,"status":"ok","timestamp":1658347331684,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"h2eoNh1MhdUS","outputId":"320827b2-fe2e-4050-a5a6-f0deaadf43ad"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:8: TqdmDeprecationWarning: This function will be removed in tqdm==5.0.0\n","Please use `tqdm.notebook.tqdm` instead of `tqdm.tqdm_notebook`\n","  \n"]},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"7b89396309134c0da4108517e4dd2a97","version_major":2,"version_minor":0},"text/plain":["Evaluation iteration:   0%|          | 0/371 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"data":{"application/vnd.jupyter.widget-view+json":{"model_id":"3eb1c1e281224464b1bbf62b22ce1e27","version_major":2,"version_minor":0},"text/plain":["Evaluation iteration:   0%|          | 0/93 [00:00\u003c?, ?it/s]"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Training performance: (0.8627318718381113, 0.8627318718381113, 0.8627318718381113, None)\n","Development performance: (0.8786244099797708, 0.8786244099797708, 0.8786244099797708, None)\n"]}],"source":["# model_state_dict = torch.load(os.path.join(OUTPUT_DIR, MODEL_FILE_NAME), map_location=lambda storage, loc: storage)\n","# model = BertForSequenceClassification.from_pretrained(BERT_MODEL, state_dict=model_state_dict, num_labels = 2)\n","# model.to(device)\n","\n","model.eval()\n","\n","_, train_correct, train_predicted = evaluate(model, train_dataloader)\n","_, dev_correct, dev_predicted = evaluate(model, dev_dataloader)\n","\n","print(\"Training performance:\", precision_recall_fscore_support(train_correct, train_predicted, average=\"micro\"))\n","print(\"Development performance:\", precision_recall_fscore_support(dev_correct, dev_predicted, average=\"micro\"))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":200},"executionInfo":{"elapsed":152,"status":"error","timestamp":1658357648052,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"5KeOenyDEihv","outputId":"bdeeddd5-991e-404b-b2de-1c392672ab2b"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-3-07f2887a36cc\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# test_features = convert_examples_to_inputs(test_texts, test_labels, label2idx, MAX_SEQ_LENGTH, tokenizer)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;31m# test_dataloader = get_data_loader(test_features, MAX_SEQ_LENGTH, BATCH_SIZE, shuffle=False)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 10\u001b[0;31m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_correct\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_predicted\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_dataloader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'model' is not defined"]}],"source":["model_state_dict = torch.load(os.path.join(OUTPUT_DIR, MODEL_FILE_NAME), map_location=lambda storage, loc: storage)\n","model = BertForSequenceClassification.from_pretrained(BERT_MODEL, state_dict=model_state_dict, num_labels = 2)\n","model.to(device)\n","\n","model.eval()\n","\n","test_texts, test_labels = c_desc_2014.desc, c_desc_2014.loan_status\n","test_features = convert_examples_to_inputs(test_texts, test_labels, label2idx, MAX_SEQ_LENGTH, tokenizer)\n","test_dataloader = get_data_loader(test_features, MAX_SEQ_LENGTH, BATCH_SIZE, shuffle=False)\n","_, test_correct, test_predicted = evaluate(model, test_dataloader)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"elapsed":131,"status":"ok","timestamp":1658355098523,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"ZLhdNC2zkTzE","outputId":"83580d2c-5137-49af-c2a1-cb8c0e82514d"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'I am a great candidate for this loan because I have not missed a beat on any thing in five years. Thanks'"]},"execution_count":52,"metadata":{},"output_type":"execute_result"}],"source":["dfc_def.desc.iloc[1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":137,"status":"ok","timestamp":1658354777755,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"Wk448rYWmRcH","outputId":"e869831f-1b13-42dc-b1a9-9311b5f2472a"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n"]}],"source":["dfc_def['y'] = dfc_def.issue_d.apply(lambda x: int(str(x)[-4:]))\n","# dfc_def[\"issue_d\"] = pd.to_datetime(dfc_def[\"issue_d\"], format=\"%m%d\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xx88Ilk8rFsA"},"outputs":[],"source":["c_desc['y'] = c_desc.issue_d.apply(lambda x: int(str(x)[-4:]))\n","c_desc_2014 = c_desc[c_desc['y'] \u003c 2014]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lvMzwLb-pdbR"},"outputs":[],"source":["dfc_def_2014 = dfc_def[dfc_def['y'] \u003c 2014]\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1,"status":"ok","timestamp":1658356312768,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"U2qdH4NkTwcM","outputId":"f3d1d1c3-11e9-4a4b-9610-1621c0503d1b"},"outputs":[{"data":{"text/plain":["array([1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n","       0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n","       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1,\n","       1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0])"]},"execution_count":58,"metadata":{},"output_type":"execute_result"}],"source":["test_correct[:100]\n","\n","# dfc = np.array(dfc)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":154,"status":"ok","timestamp":1658356185131,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"6Xr2sXhqQ0uA","outputId":"7db2696d-c527-4051-dcaf-31350cc04711"},"outputs":[{"name":"stdout","output_type":"stream","text":["Training performance: (0.3578901683395972, 0.3578901683395972, 0.3578901683395972, None)\n"]}],"source":["print(\"Training performance:\", precision_recall_fscore_support(test_correct, test_predicted, average=\"micro\"))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":149,"status":"ok","timestamp":1658353246231,"user":{"displayName":"Chenxin Fang","userId":"03656480775085171654"},"user_tz":420},"id":"Fu3cHijsRJ_D","outputId":"ad28d918-e0f3-4713-f179-aeeacf14fd01"},"outputs":[{"data":{"text/plain":["(1, 5000)"]},"execution_count":25,"metadata":{},"output_type":"execute_result"}],"source":["count = 0\n","for i in test_predicted:\n","  if i == 0:\n","    count += 1\n","count, len(test_predicted)\n"]}],"metadata":{"accelerator":"GPU","colab":{"name":"bert-dataopen","version":""},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"03878a44c3414a2aa12296e8c019895b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cd64ea7a2cb04955bce91253f25cb4f8","placeholder":"​","style":"IPY_MODEL_cc348ad1deb944a697993d362ac5f2b2","value":" 137/137 [00:12\u0026lt;00:00, 11.67it/s]"}},"044c4bbbcd0e4f93b60bc11d010a8f9a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"04c598aaa6c6402ea7d5d2bd51cdc7bd":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0ad92cedf49f4e3fb348d75b12839098":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0b291772e3c248b68b1db9d1342a2409":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0ec6e3cfc99544b3841f42143aa4868a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_9156421efc3942209edc8503bcab9d70","max":546,"min":0,"orientation":"horizontal","style":"IPY_MODEL_f101249f39fa453d81dc9dbfae8d8c7d","value":546}},"0f55c0d17fee44a0a2a7f11d8c083cd5":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"117e4bfacbe744f2a255b283104e358b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1481e2883abb450fac0cd753fff1ddc2":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"16020da0b4d4405eb15f0a282fc33062":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"1702dde396cf4786a76d86d706890c2d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_470d59d83c88434d805e23392463e342","placeholder":"​","style":"IPY_MODEL_311184a6892a4f6096209bbe058dc21c","value":"Training iteration: 100%"}},"1a3c774959544bb0927a82275179fde3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0b291772e3c248b68b1db9d1342a2409","placeholder":"​","style":"IPY_MODEL_117e4bfacbe744f2a255b283104e358b","value":"Evaluation iteration: 100%"}},"1c0e9d7737c54360912682afb7b49143":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_4585fe5836714555b21847906cd99da8","IPY_MODEL_27ca1c68f0ba4c01a2bfb8f385025d36","IPY_MODEL_88f91a1075c941edbfc18c2d2fc5b505"],"layout":"IPY_MODEL_5d2b02a8dcf34e79b4395b7682e56f6d"}},"1ce6eab3e04a46a7ae84a2419bacd408":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_384b483659944397a167112acf326d22","max":546,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e4b49464a48c4c47a2ee18dd96bb49ed","value":546}},"1d192e41fab4468989c1736c1e1dc6da":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1de53619f4e846d69adb5ab45e2fd87a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"21d3fcab9df94744bb8f65fbcb64fff5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_1702dde396cf4786a76d86d706890c2d","IPY_MODEL_51ae0d7859384918956fb0e142946f5a","IPY_MODEL_c55236d65d6c4d758c80375a10dd604c"],"layout":"IPY_MODEL_c8d147124bb1496ca3cf6bfe239d666e"}},"228fc65a46314cac962f46a87232ac08":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"27ca1c68f0ba4c01a2bfb8f385025d36":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d12b3a126a044e29ad56ccc319788432","max":137,"min":0,"orientation":"horizontal","style":"IPY_MODEL_cf95999de3804d49b367fb88f5e89d56","value":137}},"292d96ca28da450caf55dc047a0db253":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0ad92cedf49f4e3fb348d75b12839098","max":93,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9c96dd86c5194593ba913b4b62517f4e","value":93}},"2b9b9200a3bf4c0c86995b0f5bf037d3":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2e551aa61ec54c1aab872ea7e2f9c81a":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2fa129c90c6348fd8bb6743265fd1c28":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"311184a6892a4f6096209bbe058dc21c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"314125afa02d4302947a2aacd5dd2efa":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_04c598aaa6c6402ea7d5d2bd51cdc7bd","max":137,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9b0d92b517c64ccaa228c47c84618387","value":137}},"36a050606e25425a988c86ddac8a1e3c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_99e9b3665a744a10b32eac7f3fb9f948","IPY_MODEL_fed1813d1729491aaa57c898458008fc","IPY_MODEL_9728ab6a79aa4a71a3eeb8a4215af7be"],"layout":"IPY_MODEL_8561effbb0964c7c98f25b64bff70980"}},"37671ea645394efaae04d48380763af4":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"384b483659944397a167112acf326d22":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"39bd09a6fe2c4320a917b9869fd177f8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1de53619f4e846d69adb5ab45e2fd87a","placeholder":"​","style":"IPY_MODEL_8710b0c90460485f90e46e6397c317b0","value":" 371/371 [00:35\u0026lt;00:00,  9.91it/s]"}},"3c292df80bb1484993b3d762d50aea01":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_cd05c3843d1c45918b0e4eb519e46075","placeholder":"​","style":"IPY_MODEL_93b5fefc5e5345c485b977b1ee4679d0","value":" 546/546 [02:40\u0026lt;00:00,  3.79it/s]"}},"3eb1c1e281224464b1bbf62b22ce1e27":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bead261d2ed0412d9b877d9bdd319ff7","IPY_MODEL_292d96ca28da450caf55dc047a0db253","IPY_MODEL_7d4b71da06b24a8a8c057ce20d8ca720"],"layout":"IPY_MODEL_46086a6c77804ea8a9ae07c082092684"}},"3f622f4342a8467a8b678e13091958ba":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_9c5e1335d36340059c658379ae367345","IPY_MODEL_98733a8d152440588bbf3419d83bef9e","IPY_MODEL_b96c6cb890d74d0d9c786d49cac5feab"],"layout":"IPY_MODEL_cb2e70f0a9a7402c90dd10d4a53be4f3"}},"4355f02595fa4d2c99573cb8c2253e75":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4585fe5836714555b21847906cd99da8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4ad4b4d1b25540c9add45fbe8a6ce5e3","placeholder":"​","style":"IPY_MODEL_1d192e41fab4468989c1736c1e1dc6da","value":"Evaluation iteration: 100%"}},"46086a6c77804ea8a9ae07c082092684":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"467484ff48d04d8cbe6df69ecb25653a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_637ef08183ba4931a3549a32c008483c","placeholder":"​","style":"IPY_MODEL_6bd8394f38624daa983b06c528da530e","value":"Evaluation iteration: 100%"}},"470d59d83c88434d805e23392463e342":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"472ffea5604e49adb0defcc1f0b9fe5a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b0994687426046219c6e7351e6b264ef","placeholder":"​","style":"IPY_MODEL_4a882684a07648eeac2aefcd366e0b8e","value":" 546/546 [02:37\u0026lt;00:00,  3.77it/s]"}},"489ef5c510ca403b9b5779d8363dbaca":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4a882684a07648eeac2aefcd366e0b8e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4ad4b4d1b25540c9add45fbe8a6ce5e3":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4e94e21fcb0c4f77b00316f83a8f480d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"51ae0d7859384918956fb0e142946f5a":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_78173957ecc54d51aeb89835a88673bb","max":546,"min":0,"orientation":"horizontal","style":"IPY_MODEL_6aba68d6c6f642f0acf632d69366a3c6","value":546}},"52ac974cd40d497192326ad0112b7209":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5754325d9c4347a89701aa49bae3e0d7":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e89215c8046648929799cdcfc26acac1","placeholder":"​","style":"IPY_MODEL_bf2aa5ceec134c92a2a3ebfecfe36d13","value":" 137/137 [00:12\u0026lt;00:00, 11.50it/s]"}},"5a25154e54a74167b994724c2cc5263d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5d2b02a8dcf34e79b4395b7682e56f6d":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"637ef08183ba4931a3549a32c008483c":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"68f942b9fee64e5f9c890384e4ac8c49":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bdf0c53f6e1b48589c9feb634fffa1a7","IPY_MODEL_1ce6eab3e04a46a7ae84a2419bacd408","IPY_MODEL_472ffea5604e49adb0defcc1f0b9fe5a"],"layout":"IPY_MODEL_044c4bbbcd0e4f93b60bc11d010a8f9a"}},"69ec3fbf73d746eeb3b6964721cb0c07":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6aba68d6c6f642f0acf632d69366a3c6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"6bd8394f38624daa983b06c528da530e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6ea665dfed2b4731a4e23ee69bb479a6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"72d852c3ba8a4eb9b17558f6bc62c854":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"75a7c5fc4d9b44c3ab3c3ba16e1d8d74":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_91d4d51b40814f359175ca1462d0e86e","placeholder":"​","style":"IPY_MODEL_37671ea645394efaae04d48380763af4","value":"Training iteration: 100%"}},"78173957ecc54d51aeb89835a88673bb":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7ad6bdf7c5b94f07b63dc8227725eeb3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"7b89396309134c0da4108517e4dd2a97":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_1a3c774959544bb0927a82275179fde3","IPY_MODEL_a2eb42d2358e4871bad5fc0bae685ef7","IPY_MODEL_39bd09a6fe2c4320a917b9869fd177f8"],"layout":"IPY_MODEL_9a484dce3d794f75b3ea013c3bda1344"}},"7d4b71da06b24a8a8c057ce20d8ca720":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0f55c0d17fee44a0a2a7f11d8c083cd5","placeholder":"​","style":"IPY_MODEL_ce82d9cbb90147fda2ff45ea003467a6","value":" 93/93 [00:09\u0026lt;00:00, 10.24it/s]"}},"8482e2e41ac74ab7ae755a47840b4f4b":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8489c9da25714553955c2ad94f96d870":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8561effbb0964c7c98f25b64bff70980":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"86f5b2f54e334dd99bb96ee8ab5d2baf":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f58e363286374f5d88cb4c4f62cd222f","IPY_MODEL_f7a8b93b024341bd9097e5e1c4aaa3a3","IPY_MODEL_a68444d559c44610aed5729979fb7e47"],"layout":"IPY_MODEL_52ac974cd40d497192326ad0112b7209"}},"8710b0c90460485f90e46e6397c317b0":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8751e95ab111450486dfa0d40a82d1e8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"88f91a1075c941edbfc18c2d2fc5b505":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d6d4745e44824d19ad9ce6e1796ae8e9","placeholder":"​","style":"IPY_MODEL_5a25154e54a74167b994724c2cc5263d","value":" 137/137 [00:12\u0026lt;00:00, 11.63it/s]"}},"89561340a32648888b1dc6747f6169f4":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8dc2f746d1554f0e98a7a7ee2f314982":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9156421efc3942209edc8503bcab9d70":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"91d4d51b40814f359175ca1462d0e86e":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"93b5fefc5e5345c485b977b1ee4679d0":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"9728ab6a79aa4a71a3eeb8a4215af7be":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2b9b9200a3bf4c0c86995b0f5bf037d3","placeholder":"​","style":"IPY_MODEL_7ad6bdf7c5b94f07b63dc8227725eeb3","value":" 201/546 [00:58\u0026lt;01:39,  3.47it/s]"}},"979f7c7bc4b446aeb972ba02c8b9baa5":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"98733a8d152440588bbf3419d83bef9e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_4e94e21fcb0c4f77b00316f83a8f480d","max":137,"min":0,"orientation":"horizontal","style":"IPY_MODEL_16020da0b4d4405eb15f0a282fc33062","value":137}},"99e9b3665a744a10b32eac7f3fb9f948":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_228fc65a46314cac962f46a87232ac08","placeholder":"​","style":"IPY_MODEL_489ef5c510ca403b9b5779d8363dbaca","value":"Training iteration:  37%"}},"9a484dce3d794f75b3ea013c3bda1344":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9b0d92b517c64ccaa228c47c84618387":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9b703f6b6f234ba09a8df43f5839ee1b":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8dc2f746d1554f0e98a7a7ee2f314982","placeholder":"​","style":"IPY_MODEL_72d852c3ba8a4eb9b17558f6bc62c854","value":"Evaluation iteration: 100%"}},"9c5e1335d36340059c658379ae367345":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ef446c54b64e42058dd82696d985b355","placeholder":"​","style":"IPY_MODEL_ab8a7efbb077401da1524ba6bc4b5393","value":"Evaluation iteration: 100%"}},"9c96dd86c5194593ba913b4b62517f4e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9faa994ab9a2465ba4348a8382e244e8":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_8482e2e41ac74ab7ae755a47840b4f4b","max":137,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8751e95ab111450486dfa0d40a82d1e8","value":137}},"a0b2844fb79b4882b5ce3ffe5ad79dbd":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a2eb42d2358e4871bad5fc0bae685ef7":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_2fa129c90c6348fd8bb6743265fd1c28","max":371,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b42ed584924c48cb91a42ec3c8712f39","value":371}},"a68444d559c44610aed5729979fb7e47":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2e551aa61ec54c1aab872ea7e2f9c81a","placeholder":"​","style":"IPY_MODEL_fdcf1c48edc34ebfb6941ef413e000c9","value":" 546/546 [02:37\u0026lt;00:00,  3.78it/s]"}},"ab8a7efbb077401da1524ba6bc4b5393":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b0994687426046219c6e7351e6b264ef":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b42ed584924c48cb91a42ec3c8712f39":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"b74ac82ab7664779852a4366cdee0910":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b7a4912c1d33488cbcf15614bb6a260e":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b96c6cb890d74d0d9c786d49cac5feab":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a0b2844fb79b4882b5ce3ffe5ad79dbd","placeholder":"​","style":"IPY_MODEL_f37c10418f5945b99ae61b338296c7f2","value":" 137/137 [00:12\u0026lt;00:00, 11.65it/s]"}},"bdf0c53f6e1b48589c9feb634fffa1a7":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f6e4f6d2b1684c829507b929c97fc191","placeholder":"​","style":"IPY_MODEL_979f7c7bc4b446aeb972ba02c8b9baa5","value":"Training iteration: 100%"}},"bead261d2ed0412d9b877d9bdd319ff7":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_dc72f28a43564bdda3d0010dcefae124","placeholder":"​","style":"IPY_MODEL_ec7b2f8a529248d194e8b5d3b4c5b7ca","value":"Evaluation iteration: 100%"}},"bf2aa5ceec134c92a2a3ebfecfe36d13":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c55236d65d6c4d758c80375a10dd604c":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_89561340a32648888b1dc6747f6169f4","placeholder":"​","style":"IPY_MODEL_b7a4912c1d33488cbcf15614bb6a260e","value":" 546/546 [02:37\u0026lt;00:00,  3.78it/s]"}},"c867d9b9face44f2adc32b561c84e6b2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c8d147124bb1496ca3cf6bfe239d666e":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cb2e70f0a9a7402c90dd10d4a53be4f3":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cc348ad1deb944a697993d362ac5f2b2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"cd05c3843d1c45918b0e4eb519e46075":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cd64ea7a2cb04955bce91253f25cb4f8":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ce82d9cbb90147fda2ff45ea003467a6":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"cf95999de3804d49b367fb88f5e89d56":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d0d022c478e04ed888c2ae107cae17bd":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d12b3a126a044e29ad56ccc319788432":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d6d4745e44824d19ad9ce6e1796ae8e9":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"dc72f28a43564bdda3d0010dcefae124":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"de023026981c4324a08406acc7acacc2":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e4b49464a48c4c47a2ee18dd96bb49ed":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e5edb06d60954f1494621f48b91bd27f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_467484ff48d04d8cbe6df69ecb25653a","IPY_MODEL_9faa994ab9a2465ba4348a8382e244e8","IPY_MODEL_5754325d9c4347a89701aa49bae3e0d7"],"layout":"IPY_MODEL_b74ac82ab7664779852a4366cdee0910"}},"e8287b0eeaaf40cba99737d4b65317e9":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_9b703f6b6f234ba09a8df43f5839ee1b","IPY_MODEL_314125afa02d4302947a2aacd5dd2efa","IPY_MODEL_03878a44c3414a2aa12296e8c019895b"],"layout":"IPY_MODEL_8489c9da25714553955c2ad94f96d870"}},"e89215c8046648929799cdcfc26acac1":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ec7b2f8a529248d194e8b5d3b4c5b7ca":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ef446c54b64e42058dd82696d985b355":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f101249f39fa453d81dc9dbfae8d8c7d":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"ProgressStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f37c10418f5945b99ae61b338296c7f2":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f58e363286374f5d88cb4c4f62cd222f":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HTMLModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4355f02595fa4d2c99573cb8c2253e75","placeholder":"​","style":"IPY_MODEL_6ea665dfed2b4731a4e23ee69bb479a6","value":"Training iteration: 100%"}},"f698400144dd42b683d2e27e3f66eedf":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"HBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_75a7c5fc4d9b44c3ab3c3ba16e1d8d74","IPY_MODEL_0ec6e3cfc99544b3841f42143aa4868a","IPY_MODEL_3c292df80bb1484993b3d762d50aea01"],"layout":"IPY_MODEL_de023026981c4324a08406acc7acacc2"}},"f6e4f6d2b1684c829507b929c97fc191":{"model_module":"@jupyter-widgets/base","model_module_version":"1.2.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f7a8b93b024341bd9097e5e1c4aaa3a3":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_d0d022c478e04ed888c2ae107cae17bd","max":546,"min":0,"orientation":"horizontal","style":"IPY_MODEL_69ec3fbf73d746eeb3b6964721cb0c07","value":546}},"fdcf1c48edc34ebfb6941ef413e000c9":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"fed1813d1729491aaa57c898458008fc":{"model_module":"@jupyter-widgets/controls","model_module_version":"1.5.0","model_name":"FloatProgressModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"","description":"","description_tooltip":null,"layout":"IPY_MODEL_1481e2883abb450fac0cd753fff1ddc2","max":546,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c867d9b9face44f2adc32b561c84e6b2","value":201}}}}},"nbformat":4,"nbformat_minor":0}